//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MainSL
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using VotGES.Web.Services;
    
    
    /// <summary>
    /// Контекст полнофункционального интернет-приложения (RIA).
    /// </summary>
    /// <remarks>
    /// Данный контекст расширяет базовый и делает доступными службы и типы приложений,
    /// которые могут быть использованы в коде и xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализирует новый экземпляр класса WebContext.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает контекст, зарегистрированный как объект времени существования в данном приложении.
        /// </summary>
        /// Исключение <exception cref="InvalidOperationException"> вызывается в том случае, если отсутствует текущее приложение,
        /// не добавлено ни одного контекста либо было добавлено более одного контекста.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Возвращает пользователя, прошедшего проверку подлинности.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace VotGES.Chart
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Класс "ChartAnswer".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Chart")]
    public sealed partial class ChartAnswer : ComplexObject
    {
        
        private bool _allowTrack;
        
        private bool _allowZoom;
        
        private ChartData _data;
        
        private ChartProperties _properties;
        
        private string _title;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAllowTrackChanging(bool value);
        partial void OnAllowTrackChanged();
        partial void OnAllowZoomChanging(bool value);
        partial void OnAllowZoomChanged();
        partial void OnDataChanging(ChartData value);
        partial void OnDataChanged();
        partial void OnPropertiesChanging(ChartProperties value);
        partial void OnPropertiesChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ChartAnswer"/>.
        /// </summary>
        public ChartAnswer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "AllowTrack".
        /// </summary>
        [DataMember()]
        public bool AllowTrack
        {
            get
            {
                return this._allowTrack;
            }
            set
            {
                if ((this._allowTrack != value))
                {
                    this.OnAllowTrackChanging(value);
                    this.RaiseDataMemberChanging("AllowTrack");
                    this.ValidateProperty("AllowTrack", value);
                    this._allowTrack = value;
                    this.RaiseDataMemberChanged("AllowTrack");
                    this.OnAllowTrackChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "AllowZoom".
        /// </summary>
        [DataMember()]
        public bool AllowZoom
        {
            get
            {
                return this._allowZoom;
            }
            set
            {
                if ((this._allowZoom != value))
                {
                    this.OnAllowZoomChanging(value);
                    this.RaiseDataMemberChanging("AllowZoom");
                    this.ValidateProperty("AllowZoom", value);
                    this._allowZoom = value;
                    this.RaiseDataMemberChanged("AllowZoom");
                    this.OnAllowZoomChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Data".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartData Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Properties".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartProperties Properties
        {
            get
            {
                return this._properties;
            }
            set
            {
                if ((this._properties != value))
                {
                    this.OnPropertiesChanging(value);
                    this.RaiseDataMemberChanging("Properties");
                    this.ValidateProperty("Properties", value);
                    this._properties = value;
                    this.RaiseDataMemberChanged("Properties");
                    this.OnPropertiesChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Title".
        /// </summary>
        [DataMember()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "ChartAxisProperties".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Chart")]
    public sealed partial class ChartAxisProperties : ComplexObject
    {
        
        private bool _auto;
        
        private int _index;
        
        private double _interval;
        
        private double _max;
        
        private double _min;
        
        private double _minHeight;
        
        private bool _processAuto;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoChanging(bool value);
        partial void OnAutoChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnIntervalChanging(double value);
        partial void OnIntervalChanged();
        partial void OnMaxChanging(double value);
        partial void OnMaxChanged();
        partial void OnMinChanging(double value);
        partial void OnMinChanged();
        partial void OnMinHeightChanging(double value);
        partial void OnMinHeightChanged();
        partial void OnProcessAutoChanging(bool value);
        partial void OnProcessAutoChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ChartAxisProperties"/>.
        /// </summary>
        public ChartAxisProperties()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Auto".
        /// </summary>
        [DataMember()]
        public bool Auto
        {
            get
            {
                return this._auto;
            }
            set
            {
                if ((this._auto != value))
                {
                    this.OnAutoChanging(value);
                    this.RaiseDataMemberChanging("Auto");
                    this.ValidateProperty("Auto", value);
                    this._auto = value;
                    this.RaiseDataMemberChanged("Auto");
                    this.OnAutoChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Index".
        /// </summary>
        [DataMember()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Interval".
        /// </summary>
        [DataMember()]
        public double Interval
        {
            get
            {
                return this._interval;
            }
            set
            {
                if ((this._interval != value))
                {
                    this.OnIntervalChanging(value);
                    this.RaiseDataMemberChanging("Interval");
                    this.ValidateProperty("Interval", value);
                    this._interval = value;
                    this.RaiseDataMemberChanged("Interval");
                    this.OnIntervalChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Max".
        /// </summary>
        [DataMember()]
        public double Max
        {
            get
            {
                return this._max;
            }
            set
            {
                if ((this._max != value))
                {
                    this.OnMaxChanging(value);
                    this.RaiseDataMemberChanging("Max");
                    this.ValidateProperty("Max", value);
                    this._max = value;
                    this.RaiseDataMemberChanged("Max");
                    this.OnMaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Min".
        /// </summary>
        [DataMember()]
        public double Min
        {
            get
            {
                return this._min;
            }
            set
            {
                if ((this._min != value))
                {
                    this.OnMinChanging(value);
                    this.RaiseDataMemberChanging("Min");
                    this.ValidateProperty("Min", value);
                    this._min = value;
                    this.RaiseDataMemberChanged("Min");
                    this.OnMinChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "MinHeight".
        /// </summary>
        [DataMember()]
        public double MinHeight
        {
            get
            {
                return this._minHeight;
            }
            set
            {
                if ((this._minHeight != value))
                {
                    this.OnMinHeightChanging(value);
                    this.RaiseDataMemberChanging("MinHeight");
                    this.ValidateProperty("MinHeight", value);
                    this._minHeight = value;
                    this.RaiseDataMemberChanged("MinHeight");
                    this.OnMinHeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ProcessAuto".
        /// </summary>
        [DataMember()]
        public bool ProcessAuto
        {
            get
            {
                return this._processAuto;
            }
            set
            {
                if ((this._processAuto != value))
                {
                    this.OnProcessAutoChanging(value);
                    this.RaiseDataMemberChanging("ProcessAuto");
                    this.ValidateProperty("ProcessAuto", value);
                    this._processAuto = value;
                    this.RaiseDataMemberChanged("ProcessAuto");
                    this.OnProcessAutoChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "ChartData".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Chart")]
    public sealed partial class ChartData : ComplexObject
    {
        
        private List<ChartDataSerie> _series;
        
        private Dictionary<string, int> _seriesNames;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnSeriesChanging(List<ChartDataSerie> value);
        partial void OnSeriesChanged();
        partial void OnSeriesNamesChanging(Dictionary<string, int> value);
        partial void OnSeriesNamesChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ChartData"/>.
        /// </summary>
        public ChartData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Series".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<ChartDataSerie> Series
        {
            get
            {
                return this._series;
            }
            set
            {
                if ((this._series != value))
                {
                    this.OnSeriesChanging(value);
                    this.RaiseDataMemberChanging("Series");
                    this.ValidateProperty("Series", value);
                    this._series = value;
                    this.RaiseDataMemberChanged("Series");
                    this.OnSeriesChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SeriesNames".
        /// </summary>
        [DataMember()]
        public Dictionary<string, int> SeriesNames
        {
            get
            {
                return this._seriesNames;
            }
            set
            {
                if ((this._seriesNames != value))
                {
                    this.OnSeriesNamesChanging(value);
                    this.RaiseDataMemberChanging("SeriesNames");
                    this.ValidateProperty("SeriesNames", value);
                    this._seriesNames = value;
                    this.RaiseDataMemberChanged("SeriesNames");
                    this.OnSeriesNamesChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "ChartDataPoint".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Chart")]
    public sealed partial class ChartDataPoint : ComplexObject
    {
        
        private DateTime _xVal;
        
        private double _xValDouble;
        
        private double _yVal;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnXValChanging(DateTime value);
        partial void OnXValChanged();
        partial void OnXValDoubleChanging(double value);
        partial void OnXValDoubleChanged();
        partial void OnYValChanging(double value);
        partial void OnYValChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ChartDataPoint"/>.
        /// </summary>
        public ChartDataPoint()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "XVal".
        /// </summary>
        [DataMember()]
        public DateTime XVal
        {
            get
            {
                return this._xVal;
            }
            set
            {
                if ((this._xVal != value))
                {
                    this.OnXValChanging(value);
                    this.RaiseDataMemberChanging("XVal");
                    this.ValidateProperty("XVal", value);
                    this._xVal = value;
                    this.RaiseDataMemberChanged("XVal");
                    this.OnXValChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "XValDouble".
        /// </summary>
        [DataMember()]
        public double XValDouble
        {
            get
            {
                return this._xValDouble;
            }
            set
            {
                if ((this._xValDouble != value))
                {
                    this.OnXValDoubleChanging(value);
                    this.RaiseDataMemberChanging("XValDouble");
                    this.ValidateProperty("XValDouble", value);
                    this._xValDouble = value;
                    this.RaiseDataMemberChanged("XValDouble");
                    this.OnXValDoubleChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "YVal".
        /// </summary>
        [DataMember()]
        public double YVal
        {
            get
            {
                return this._yVal;
            }
            set
            {
                if ((this._yVal != value))
                {
                    this.OnYValChanging(value);
                    this.RaiseDataMemberChanging("YVal");
                    this.ValidateProperty("YVal", value);
                    this._yVal = value;
                    this.RaiseDataMemberChanged("YVal");
                    this.OnYValChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "ChartDataSerie".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Chart")]
    public sealed partial class ChartDataSerie : ComplexObject
    {
        
        private string _name;
        
        private List<ChartDataPoint> _points;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPointsChanging(List<ChartDataPoint> value);
        partial void OnPointsChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ChartDataSerie"/>.
        /// </summary>
        public ChartDataSerie()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Name".
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Points".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<ChartDataPoint> Points
        {
            get
            {
                return this._points;
            }
            set
            {
                if ((this._points != value))
                {
                    this.OnPointsChanging(value);
                    this.RaiseDataMemberChanging("Points");
                    this.ValidateProperty("Points", value);
                    this._points = value;
                    this.RaiseDataMemberChanged("Points");
                    this.OnPointsChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "ChartProperties".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Chart")]
    public sealed partial class ChartProperties : ComplexObject
    {
        
        private List<ChartAxisProperties> _axes;
        
        private Dictionary<int, int> _axesNumbers;
        
        private List<ChartSerieProperties> _series;
        
        private Dictionary<string, int> _seriesNames;
        
        private XAxisTypeEnum _xAxisType;
        
        private string _xValueFormatString;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAxesChanging(List<ChartAxisProperties> value);
        partial void OnAxesChanged();
        partial void OnAxesNumbersChanging(Dictionary<int, int> value);
        partial void OnAxesNumbersChanged();
        partial void OnSeriesChanging(List<ChartSerieProperties> value);
        partial void OnSeriesChanged();
        partial void OnSeriesNamesChanging(Dictionary<string, int> value);
        partial void OnSeriesNamesChanged();
        partial void OnXAxisTypeChanging(XAxisTypeEnum value);
        partial void OnXAxisTypeChanged();
        partial void OnXValueFormatStringChanging(string value);
        partial void OnXValueFormatStringChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ChartProperties"/>.
        /// </summary>
        public ChartProperties()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Axes".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<ChartAxisProperties> Axes
        {
            get
            {
                return this._axes;
            }
            set
            {
                if ((this._axes != value))
                {
                    this.OnAxesChanging(value);
                    this.RaiseDataMemberChanging("Axes");
                    this.ValidateProperty("Axes", value);
                    this._axes = value;
                    this.RaiseDataMemberChanged("Axes");
                    this.OnAxesChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "AxesNumbers".
        /// </summary>
        [DataMember()]
        public Dictionary<int, int> AxesNumbers
        {
            get
            {
                return this._axesNumbers;
            }
            set
            {
                if ((this._axesNumbers != value))
                {
                    this.OnAxesNumbersChanging(value);
                    this.RaiseDataMemberChanging("AxesNumbers");
                    this.ValidateProperty("AxesNumbers", value);
                    this._axesNumbers = value;
                    this.RaiseDataMemberChanged("AxesNumbers");
                    this.OnAxesNumbersChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Series".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<ChartSerieProperties> Series
        {
            get
            {
                return this._series;
            }
            set
            {
                if ((this._series != value))
                {
                    this.OnSeriesChanging(value);
                    this.RaiseDataMemberChanging("Series");
                    this.ValidateProperty("Series", value);
                    this._series = value;
                    this.RaiseDataMemberChanged("Series");
                    this.OnSeriesChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SeriesNames".
        /// </summary>
        [DataMember()]
        public Dictionary<string, int> SeriesNames
        {
            get
            {
                return this._seriesNames;
            }
            set
            {
                if ((this._seriesNames != value))
                {
                    this.OnSeriesNamesChanging(value);
                    this.RaiseDataMemberChanging("SeriesNames");
                    this.ValidateProperty("SeriesNames", value);
                    this._seriesNames = value;
                    this.RaiseDataMemberChanged("SeriesNames");
                    this.OnSeriesNamesChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "XAxisType".
        /// </summary>
        [DataMember()]
        public XAxisTypeEnum XAxisType
        {
            get
            {
                return this._xAxisType;
            }
            set
            {
                if ((this._xAxisType != value))
                {
                    this.OnXAxisTypeChanging(value);
                    this.RaiseDataMemberChanging("XAxisType");
                    this.ValidateProperty("XAxisType", value);
                    this._xAxisType = value;
                    this.RaiseDataMemberChanged("XAxisType");
                    this.OnXAxisTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "XValueFormatString".
        /// </summary>
        [DataMember()]
        public string XValueFormatString
        {
            get
            {
                return this._xValueFormatString;
            }
            set
            {
                if ((this._xValueFormatString != value))
                {
                    this.OnXValueFormatStringChanging(value);
                    this.RaiseDataMemberChanging("XValueFormatString");
                    this.ValidateProperty("XValueFormatString", value);
                    this._xValueFormatString = value;
                    this.RaiseDataMemberChanged("XValueFormatString");
                    this.OnXValueFormatStringChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "ChartSerieProperties".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Chart")]
    public sealed partial class ChartSerieProperties : ComplexObject
    {
        
        private bool _allowHigh;
        
        private string _color;
        
        private bool _enabled;
        
        private bool _hideInLegend;
        
        private bool _isGAPuskStop;
        
        private int _lineWidth;
        
        private bool _marker;
        
        private ChartSerieType _serieType;
        
        private string _tagName;
        
        private string _title;
        
        private int _yAxisIndex;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAllowHighChanging(bool value);
        partial void OnAllowHighChanged();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnEnabledChanging(bool value);
        partial void OnEnabledChanged();
        partial void OnHideInLegendChanging(bool value);
        partial void OnHideInLegendChanged();
        partial void OnisGAPuskStopChanging(bool value);
        partial void OnisGAPuskStopChanged();
        partial void OnLineWidthChanging(int value);
        partial void OnLineWidthChanged();
        partial void OnMarkerChanging(bool value);
        partial void OnMarkerChanged();
        partial void OnSerieTypeChanging(ChartSerieType value);
        partial void OnSerieTypeChanged();
        partial void OnTagNameChanging(string value);
        partial void OnTagNameChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnYAxisIndexChanging(int value);
        partial void OnYAxisIndexChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ChartSerieProperties"/>.
        /// </summary>
        public ChartSerieProperties()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "AllowHigh".
        /// </summary>
        [DataMember()]
        public bool AllowHigh
        {
            get
            {
                return this._allowHigh;
            }
            set
            {
                if ((this._allowHigh != value))
                {
                    this.OnAllowHighChanging(value);
                    this.RaiseDataMemberChanging("AllowHigh");
                    this.ValidateProperty("AllowHigh", value);
                    this._allowHigh = value;
                    this.RaiseDataMemberChanged("AllowHigh");
                    this.OnAllowHighChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Color".
        /// </summary>
        [DataMember()]
        public string Color
        {
            get
            {
                return this._color;
            }
            set
            {
                if ((this._color != value))
                {
                    this.OnColorChanging(value);
                    this.RaiseDataMemberChanging("Color");
                    this.ValidateProperty("Color", value);
                    this._color = value;
                    this.RaiseDataMemberChanged("Color");
                    this.OnColorChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Enabled".
        /// </summary>
        [DataMember()]
        public bool Enabled
        {
            get
            {
                return this._enabled;
            }
            set
            {
                if ((this._enabled != value))
                {
                    this.OnEnabledChanging(value);
                    this.RaiseDataMemberChanging("Enabled");
                    this.ValidateProperty("Enabled", value);
                    this._enabled = value;
                    this.RaiseDataMemberChanged("Enabled");
                    this.OnEnabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "HideInLegend".
        /// </summary>
        [DataMember()]
        public bool HideInLegend
        {
            get
            {
                return this._hideInLegend;
            }
            set
            {
                if ((this._hideInLegend != value))
                {
                    this.OnHideInLegendChanging(value);
                    this.RaiseDataMemberChanging("HideInLegend");
                    this.ValidateProperty("HideInLegend", value);
                    this._hideInLegend = value;
                    this.RaiseDataMemberChanged("HideInLegend");
                    this.OnHideInLegendChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "isGAPuskStop".
        /// </summary>
        [DataMember()]
        public bool isGAPuskStop
        {
            get
            {
                return this._isGAPuskStop;
            }
            set
            {
                if ((this._isGAPuskStop != value))
                {
                    this.OnisGAPuskStopChanging(value);
                    this.RaiseDataMemberChanging("isGAPuskStop");
                    this.ValidateProperty("isGAPuskStop", value);
                    this._isGAPuskStop = value;
                    this.RaiseDataMemberChanged("isGAPuskStop");
                    this.OnisGAPuskStopChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "LineWidth".
        /// </summary>
        [DataMember()]
        public int LineWidth
        {
            get
            {
                return this._lineWidth;
            }
            set
            {
                if ((this._lineWidth != value))
                {
                    this.OnLineWidthChanging(value);
                    this.RaiseDataMemberChanging("LineWidth");
                    this.ValidateProperty("LineWidth", value);
                    this._lineWidth = value;
                    this.RaiseDataMemberChanged("LineWidth");
                    this.OnLineWidthChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Marker".
        /// </summary>
        [DataMember()]
        public bool Marker
        {
            get
            {
                return this._marker;
            }
            set
            {
                if ((this._marker != value))
                {
                    this.OnMarkerChanging(value);
                    this.RaiseDataMemberChanging("Marker");
                    this.ValidateProperty("Marker", value);
                    this._marker = value;
                    this.RaiseDataMemberChanged("Marker");
                    this.OnMarkerChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SerieType".
        /// </summary>
        [DataMember()]
        public ChartSerieType SerieType
        {
            get
            {
                return this._serieType;
            }
            set
            {
                if ((this._serieType != value))
                {
                    this.OnSerieTypeChanging(value);
                    this.RaiseDataMemberChanging("SerieType");
                    this.ValidateProperty("SerieType", value);
                    this._serieType = value;
                    this.RaiseDataMemberChanged("SerieType");
                    this.OnSerieTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TagName".
        /// </summary>
        [DataMember()]
        public string TagName
        {
            get
            {
                return this._tagName;
            }
            set
            {
                if ((this._tagName != value))
                {
                    this.OnTagNameChanging(value);
                    this.RaiseDataMemberChanging("TagName");
                    this.ValidateProperty("TagName", value);
                    this._tagName = value;
                    this.RaiseDataMemberChanged("TagName");
                    this.OnTagNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Title".
        /// </summary>
        [DataMember()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "YAxisIndex".
        /// </summary>
        [DataMember()]
        public int YAxisIndex
        {
            get
            {
                return this._yAxisIndex;
            }
            set
            {
                if ((this._yAxisIndex != value))
                {
                    this.OnYAxisIndexChanging(value);
                    this.RaiseDataMemberChanging("YAxisIndex");
                    this.ValidateProperty("YAxisIndex", value);
                    this._yAxisIndex = value;
                    this.RaiseDataMemberChanged("YAxisIndex");
                    this.OnYAxisIndexChanged();
                }
            }
        }
    }
    
    public enum ChartSerieType
    {
        
        line = 0,
        
        bar = 1,
        
        pie = 2,
        
        column = 3,
        
        stepLine = 4,
        
        kpdLine = 5,
    }
    
    public enum XAxisTypeEnum
    {
        
        numeric = 0,
        
        datetime = 1,
    }
}
namespace VotGES.OgranGA
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Класс "OgranGARecord".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.OgranGA")]
    public sealed partial class OgranGARecord : ComplexObject
    {
        
        private int _cntAfterMax;
        
        private int _cntLessMin;
        
        private int _cntNPRCH;
        
        private int _cntOgran;
        
        private int _cntPusk;
        
        private int _cntStop;
        
        private int _cntZapr;
        
        private DateTime _dateEnd;
        
        private DateTime _dateStart;
        
        private int _ga;
        
        private double _timeAfterMax;
        
        private string _timeAfterMaxStr;
        
        private double _timeGen;
        
        private string _timeGenStr;
        
        private double _timeHHG;
        
        private string _timeHHGStr;
        
        private double _timeHHT;
        
        private string _timeHHTStr;
        
        private double _timeLessMin;
        
        private string _timeLessMinStr;
        
        private double _timeNPRCH;
        
        private string _timeNPRCHStr;
        
        private double _timeOgran;
        
        private string _timeOgranStr;
        
        private double _timeRun;
        
        private string _timeRunStr;
        
        private double _timeSK;
        
        private string _timeSKStr;
        
        private double _timeStop;
        
        private string _timeStopStr;
        
        private double _timeZapr;
        
        private string _timeZaprStr;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OncntAfterMaxChanging(int value);
        partial void OncntAfterMaxChanged();
        partial void OncntLessMinChanging(int value);
        partial void OncntLessMinChanged();
        partial void OncntNPRCHChanging(int value);
        partial void OncntNPRCHChanged();
        partial void OncntOgranChanging(int value);
        partial void OncntOgranChanged();
        partial void OncntPuskChanging(int value);
        partial void OncntPuskChanged();
        partial void OncntStopChanging(int value);
        partial void OncntStopChanged();
        partial void OncntZaprChanging(int value);
        partial void OncntZaprChanged();
        partial void OndateEndChanging(DateTime value);
        partial void OndateEndChanged();
        partial void OndateStartChanging(DateTime value);
        partial void OndateStartChanged();
        partial void OnGAChanging(int value);
        partial void OnGAChanged();
        partial void OntimeAfterMaxChanging(double value);
        partial void OntimeAfterMaxChanged();
        partial void OnTimeAfterMaxStrChanging(string value);
        partial void OnTimeAfterMaxStrChanged();
        partial void OntimeGenChanging(double value);
        partial void OntimeGenChanged();
        partial void OnTimeGenStrChanging(string value);
        partial void OnTimeGenStrChanged();
        partial void OntimeHHGChanging(double value);
        partial void OntimeHHGChanged();
        partial void OnTimeHHGStrChanging(string value);
        partial void OnTimeHHGStrChanged();
        partial void OntimeHHTChanging(double value);
        partial void OntimeHHTChanged();
        partial void OnTimeHHTStrChanging(string value);
        partial void OnTimeHHTStrChanged();
        partial void OntimeLessMinChanging(double value);
        partial void OntimeLessMinChanged();
        partial void OnTimeLessMinStrChanging(string value);
        partial void OnTimeLessMinStrChanged();
        partial void OntimeNPRCHChanging(double value);
        partial void OntimeNPRCHChanged();
        partial void OnTimeNPRCHStrChanging(string value);
        partial void OnTimeNPRCHStrChanged();
        partial void OntimeOgranChanging(double value);
        partial void OntimeOgranChanged();
        partial void OnTimeOgranStrChanging(string value);
        partial void OnTimeOgranStrChanged();
        partial void OntimeRunChanging(double value);
        partial void OntimeRunChanged();
        partial void OnTimeRunStrChanging(string value);
        partial void OnTimeRunStrChanged();
        partial void OntimeSKChanging(double value);
        partial void OntimeSKChanged();
        partial void OnTimeSKStrChanging(string value);
        partial void OnTimeSKStrChanged();
        partial void OntimeStopChanging(double value);
        partial void OntimeStopChanged();
        partial void OnTimeStopStrChanging(string value);
        partial void OnTimeStopStrChanged();
        partial void OntimeZaprChanging(double value);
        partial void OntimeZaprChanged();
        partial void OnTimeZaprStrChanging(string value);
        partial void OnTimeZaprStrChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="OgranGARecord"/>.
        /// </summary>
        public OgranGARecord()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "cntAfterMax".
        /// </summary>
        [DataMember()]
        public int cntAfterMax
        {
            get
            {
                return this._cntAfterMax;
            }
            set
            {
                if ((this._cntAfterMax != value))
                {
                    this.OncntAfterMaxChanging(value);
                    this.RaiseDataMemberChanging("cntAfterMax");
                    this.ValidateProperty("cntAfterMax", value);
                    this._cntAfterMax = value;
                    this.RaiseDataMemberChanged("cntAfterMax");
                    this.OncntAfterMaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "cntLessMin".
        /// </summary>
        [DataMember()]
        public int cntLessMin
        {
            get
            {
                return this._cntLessMin;
            }
            set
            {
                if ((this._cntLessMin != value))
                {
                    this.OncntLessMinChanging(value);
                    this.RaiseDataMemberChanging("cntLessMin");
                    this.ValidateProperty("cntLessMin", value);
                    this._cntLessMin = value;
                    this.RaiseDataMemberChanged("cntLessMin");
                    this.OncntLessMinChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "cntNPRCH".
        /// </summary>
        [DataMember()]
        public int cntNPRCH
        {
            get
            {
                return this._cntNPRCH;
            }
            set
            {
                if ((this._cntNPRCH != value))
                {
                    this.OncntNPRCHChanging(value);
                    this.RaiseDataMemberChanging("cntNPRCH");
                    this.ValidateProperty("cntNPRCH", value);
                    this._cntNPRCH = value;
                    this.RaiseDataMemberChanged("cntNPRCH");
                    this.OncntNPRCHChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "cntOgran".
        /// </summary>
        [DataMember()]
        public int cntOgran
        {
            get
            {
                return this._cntOgran;
            }
            set
            {
                if ((this._cntOgran != value))
                {
                    this.OncntOgranChanging(value);
                    this.RaiseDataMemberChanging("cntOgran");
                    this.ValidateProperty("cntOgran", value);
                    this._cntOgran = value;
                    this.RaiseDataMemberChanged("cntOgran");
                    this.OncntOgranChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "cntPusk".
        /// </summary>
        [DataMember()]
        public int cntPusk
        {
            get
            {
                return this._cntPusk;
            }
            set
            {
                if ((this._cntPusk != value))
                {
                    this.OncntPuskChanging(value);
                    this.RaiseDataMemberChanging("cntPusk");
                    this.ValidateProperty("cntPusk", value);
                    this._cntPusk = value;
                    this.RaiseDataMemberChanged("cntPusk");
                    this.OncntPuskChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "cntStop".
        /// </summary>
        [DataMember()]
        public int cntStop
        {
            get
            {
                return this._cntStop;
            }
            set
            {
                if ((this._cntStop != value))
                {
                    this.OncntStopChanging(value);
                    this.RaiseDataMemberChanging("cntStop");
                    this.ValidateProperty("cntStop", value);
                    this._cntStop = value;
                    this.RaiseDataMemberChanged("cntStop");
                    this.OncntStopChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "cntZapr".
        /// </summary>
        [DataMember()]
        public int cntZapr
        {
            get
            {
                return this._cntZapr;
            }
            set
            {
                if ((this._cntZapr != value))
                {
                    this.OncntZaprChanging(value);
                    this.RaiseDataMemberChanging("cntZapr");
                    this.ValidateProperty("cntZapr", value);
                    this._cntZapr = value;
                    this.RaiseDataMemberChanged("cntZapr");
                    this.OncntZaprChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "dateEnd".
        /// </summary>
        [DataMember()]
        public DateTime dateEnd
        {
            get
            {
                return this._dateEnd;
            }
            set
            {
                if ((this._dateEnd != value))
                {
                    this.OndateEndChanging(value);
                    this.RaiseDataMemberChanging("dateEnd");
                    this.ValidateProperty("dateEnd", value);
                    this._dateEnd = value;
                    this.RaiseDataMemberChanged("dateEnd");
                    this.OndateEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "dateStart".
        /// </summary>
        [DataMember()]
        public DateTime dateStart
        {
            get
            {
                return this._dateStart;
            }
            set
            {
                if ((this._dateStart != value))
                {
                    this.OndateStartChanging(value);
                    this.RaiseDataMemberChanging("dateStart");
                    this.ValidateProperty("dateStart", value);
                    this._dateStart = value;
                    this.RaiseDataMemberChanged("dateStart");
                    this.OndateStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GA".
        /// </summary>
        [DataMember()]
        public int GA
        {
            get
            {
                return this._ga;
            }
            set
            {
                if ((this._ga != value))
                {
                    this.OnGAChanging(value);
                    this.RaiseDataMemberChanging("GA");
                    this.ValidateProperty("GA", value);
                    this._ga = value;
                    this.RaiseDataMemberChanged("GA");
                    this.OnGAChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "timeAfterMax".
        /// </summary>
        [DataMember()]
        public double timeAfterMax
        {
            get
            {
                return this._timeAfterMax;
            }
            set
            {
                if ((this._timeAfterMax != value))
                {
                    this.OntimeAfterMaxChanging(value);
                    this.RaiseDataMemberChanging("timeAfterMax");
                    this.ValidateProperty("timeAfterMax", value);
                    this._timeAfterMax = value;
                    this.RaiseDataMemberChanged("timeAfterMax");
                    this.OntimeAfterMaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeAfterMaxStr".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TimeAfterMaxStr
        {
            get
            {
                return this._timeAfterMaxStr;
            }
            set
            {
                if ((this._timeAfterMaxStr != value))
                {
                    this.OnTimeAfterMaxStrChanging(value);
                    this.ValidateProperty("TimeAfterMaxStr", value);
                    this._timeAfterMaxStr = value;
                    this.RaisePropertyChanged("TimeAfterMaxStr");
                    this.OnTimeAfterMaxStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "timeGen".
        /// </summary>
        [DataMember()]
        public double timeGen
        {
            get
            {
                return this._timeGen;
            }
            set
            {
                if ((this._timeGen != value))
                {
                    this.OntimeGenChanging(value);
                    this.RaiseDataMemberChanging("timeGen");
                    this.ValidateProperty("timeGen", value);
                    this._timeGen = value;
                    this.RaiseDataMemberChanged("timeGen");
                    this.OntimeGenChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeGenStr".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TimeGenStr
        {
            get
            {
                return this._timeGenStr;
            }
            set
            {
                if ((this._timeGenStr != value))
                {
                    this.OnTimeGenStrChanging(value);
                    this.ValidateProperty("TimeGenStr", value);
                    this._timeGenStr = value;
                    this.RaisePropertyChanged("TimeGenStr");
                    this.OnTimeGenStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "timeHHG".
        /// </summary>
        [DataMember()]
        public double timeHHG
        {
            get
            {
                return this._timeHHG;
            }
            set
            {
                if ((this._timeHHG != value))
                {
                    this.OntimeHHGChanging(value);
                    this.RaiseDataMemberChanging("timeHHG");
                    this.ValidateProperty("timeHHG", value);
                    this._timeHHG = value;
                    this.RaiseDataMemberChanged("timeHHG");
                    this.OntimeHHGChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeHHGStr".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TimeHHGStr
        {
            get
            {
                return this._timeHHGStr;
            }
            set
            {
                if ((this._timeHHGStr != value))
                {
                    this.OnTimeHHGStrChanging(value);
                    this.ValidateProperty("TimeHHGStr", value);
                    this._timeHHGStr = value;
                    this.RaisePropertyChanged("TimeHHGStr");
                    this.OnTimeHHGStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "timeHHT".
        /// </summary>
        [DataMember()]
        public double timeHHT
        {
            get
            {
                return this._timeHHT;
            }
            set
            {
                if ((this._timeHHT != value))
                {
                    this.OntimeHHTChanging(value);
                    this.RaiseDataMemberChanging("timeHHT");
                    this.ValidateProperty("timeHHT", value);
                    this._timeHHT = value;
                    this.RaiseDataMemberChanged("timeHHT");
                    this.OntimeHHTChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeHHTStr".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TimeHHTStr
        {
            get
            {
                return this._timeHHTStr;
            }
            set
            {
                if ((this._timeHHTStr != value))
                {
                    this.OnTimeHHTStrChanging(value);
                    this.ValidateProperty("TimeHHTStr", value);
                    this._timeHHTStr = value;
                    this.RaisePropertyChanged("TimeHHTStr");
                    this.OnTimeHHTStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "timeLessMin".
        /// </summary>
        [DataMember()]
        public double timeLessMin
        {
            get
            {
                return this._timeLessMin;
            }
            set
            {
                if ((this._timeLessMin != value))
                {
                    this.OntimeLessMinChanging(value);
                    this.RaiseDataMemberChanging("timeLessMin");
                    this.ValidateProperty("timeLessMin", value);
                    this._timeLessMin = value;
                    this.RaiseDataMemberChanged("timeLessMin");
                    this.OntimeLessMinChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeLessMinStr".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TimeLessMinStr
        {
            get
            {
                return this._timeLessMinStr;
            }
            set
            {
                if ((this._timeLessMinStr != value))
                {
                    this.OnTimeLessMinStrChanging(value);
                    this.ValidateProperty("TimeLessMinStr", value);
                    this._timeLessMinStr = value;
                    this.RaisePropertyChanged("TimeLessMinStr");
                    this.OnTimeLessMinStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "timeNPRCH".
        /// </summary>
        [DataMember()]
        public double timeNPRCH
        {
            get
            {
                return this._timeNPRCH;
            }
            set
            {
                if ((this._timeNPRCH != value))
                {
                    this.OntimeNPRCHChanging(value);
                    this.RaiseDataMemberChanging("timeNPRCH");
                    this.ValidateProperty("timeNPRCH", value);
                    this._timeNPRCH = value;
                    this.RaiseDataMemberChanged("timeNPRCH");
                    this.OntimeNPRCHChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeNPRCHStr".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TimeNPRCHStr
        {
            get
            {
                return this._timeNPRCHStr;
            }
            set
            {
                if ((this._timeNPRCHStr != value))
                {
                    this.OnTimeNPRCHStrChanging(value);
                    this.ValidateProperty("TimeNPRCHStr", value);
                    this._timeNPRCHStr = value;
                    this.RaisePropertyChanged("TimeNPRCHStr");
                    this.OnTimeNPRCHStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "timeOgran".
        /// </summary>
        [DataMember()]
        public double timeOgran
        {
            get
            {
                return this._timeOgran;
            }
            set
            {
                if ((this._timeOgran != value))
                {
                    this.OntimeOgranChanging(value);
                    this.RaiseDataMemberChanging("timeOgran");
                    this.ValidateProperty("timeOgran", value);
                    this._timeOgran = value;
                    this.RaiseDataMemberChanged("timeOgran");
                    this.OntimeOgranChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeOgranStr".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TimeOgranStr
        {
            get
            {
                return this._timeOgranStr;
            }
            set
            {
                if ((this._timeOgranStr != value))
                {
                    this.OnTimeOgranStrChanging(value);
                    this.ValidateProperty("TimeOgranStr", value);
                    this._timeOgranStr = value;
                    this.RaisePropertyChanged("TimeOgranStr");
                    this.OnTimeOgranStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "timeRun".
        /// </summary>
        [DataMember()]
        public double timeRun
        {
            get
            {
                return this._timeRun;
            }
            set
            {
                if ((this._timeRun != value))
                {
                    this.OntimeRunChanging(value);
                    this.RaiseDataMemberChanging("timeRun");
                    this.ValidateProperty("timeRun", value);
                    this._timeRun = value;
                    this.RaiseDataMemberChanged("timeRun");
                    this.OntimeRunChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeRunStr".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TimeRunStr
        {
            get
            {
                return this._timeRunStr;
            }
            set
            {
                if ((this._timeRunStr != value))
                {
                    this.OnTimeRunStrChanging(value);
                    this.ValidateProperty("TimeRunStr", value);
                    this._timeRunStr = value;
                    this.RaisePropertyChanged("TimeRunStr");
                    this.OnTimeRunStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "timeSK".
        /// </summary>
        [DataMember()]
        public double timeSK
        {
            get
            {
                return this._timeSK;
            }
            set
            {
                if ((this._timeSK != value))
                {
                    this.OntimeSKChanging(value);
                    this.RaiseDataMemberChanging("timeSK");
                    this.ValidateProperty("timeSK", value);
                    this._timeSK = value;
                    this.RaiseDataMemberChanged("timeSK");
                    this.OntimeSKChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeSKStr".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TimeSKStr
        {
            get
            {
                return this._timeSKStr;
            }
            set
            {
                if ((this._timeSKStr != value))
                {
                    this.OnTimeSKStrChanging(value);
                    this.ValidateProperty("TimeSKStr", value);
                    this._timeSKStr = value;
                    this.RaisePropertyChanged("TimeSKStr");
                    this.OnTimeSKStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "timeStop".
        /// </summary>
        [DataMember()]
        public double timeStop
        {
            get
            {
                return this._timeStop;
            }
            set
            {
                if ((this._timeStop != value))
                {
                    this.OntimeStopChanging(value);
                    this.RaiseDataMemberChanging("timeStop");
                    this.ValidateProperty("timeStop", value);
                    this._timeStop = value;
                    this.RaiseDataMemberChanged("timeStop");
                    this.OntimeStopChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeStopStr".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TimeStopStr
        {
            get
            {
                return this._timeStopStr;
            }
            set
            {
                if ((this._timeStopStr != value))
                {
                    this.OnTimeStopStrChanging(value);
                    this.ValidateProperty("TimeStopStr", value);
                    this._timeStopStr = value;
                    this.RaisePropertyChanged("TimeStopStr");
                    this.OnTimeStopStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "timeZapr".
        /// </summary>
        [DataMember()]
        public double timeZapr
        {
            get
            {
                return this._timeZapr;
            }
            set
            {
                if ((this._timeZapr != value))
                {
                    this.OntimeZaprChanging(value);
                    this.RaiseDataMemberChanging("timeZapr");
                    this.ValidateProperty("timeZapr", value);
                    this._timeZapr = value;
                    this.RaiseDataMemberChanged("timeZapr");
                    this.OntimeZaprChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeZaprStr".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TimeZaprStr
        {
            get
            {
                return this._timeZaprStr;
            }
            set
            {
                if ((this._timeZaprStr != value))
                {
                    this.OnTimeZaprStrChanging(value);
                    this.ValidateProperty("TimeZaprStr", value);
                    this._timeZaprStr = value;
                    this.RaisePropertyChanged("TimeZaprStr");
                    this.OnTimeZaprStrChanged();
                }
            }
        }
    }
}
namespace VotGES.PBR
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using VotGES.Chart;
    
    
    /// <summary>
    /// Класс "CheckGraphVyrabAnswer".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.PBR")]
    public sealed partial class CheckGraphVyrabAnswer : ComplexObject
    {
        
        private ChartAnswer _chart;
        
        private List<CheckGraphVyrabTableRow> _tableH;
        
        private List<CheckGraphVyrabTableRow> _tableHH;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnChartChanging(ChartAnswer value);
        partial void OnChartChanged();
        partial void OnTableHChanging(List<CheckGraphVyrabTableRow> value);
        partial void OnTableHChanged();
        partial void OnTableHHChanging(List<CheckGraphVyrabTableRow> value);
        partial void OnTableHHChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="CheckGraphVyrabAnswer"/>.
        /// </summary>
        public CheckGraphVyrabAnswer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Chart".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer Chart
        {
            get
            {
                return this._chart;
            }
            set
            {
                if ((this._chart != value))
                {
                    this.OnChartChanging(value);
                    this.RaiseDataMemberChanging("Chart");
                    this.ValidateProperty("Chart", value);
                    this._chart = value;
                    this.RaiseDataMemberChanged("Chart");
                    this.OnChartChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TableH".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<CheckGraphVyrabTableRow> TableH
        {
            get
            {
                return this._tableH;
            }
            set
            {
                if ((this._tableH != value))
                {
                    this.OnTableHChanging(value);
                    this.RaiseDataMemberChanging("TableH");
                    this.ValidateProperty("TableH", value);
                    this._tableH = value;
                    this.RaiseDataMemberChanged("TableH");
                    this.OnTableHChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TableHH".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<CheckGraphVyrabTableRow> TableHH
        {
            get
            {
                return this._tableHH;
            }
            set
            {
                if ((this._tableHH != value))
                {
                    this.OnTableHHChanging(value);
                    this.RaiseDataMemberChanging("TableHH");
                    this.ValidateProperty("TableHH", value);
                    this._tableHH = value;
                    this.RaiseDataMemberChanged("TableHH");
                    this.OnTableHHChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "CheckGraphVyrabRGEAnswer".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.PBR")]
    public sealed partial class CheckGraphVyrabRGEAnswer : ComplexObject
    {
        
        private ChartAnswer _chartRGE1;
        
        private ChartAnswer _chartRGE2;
        
        private ChartAnswer _chartRGE3;
        
        private ChartAnswer _chartRGE4;
        
        private List<CheckGraphVyrabRGETableRow> _tableH;
        
        private List<CheckGraphVyrabRGETableRow> _tableHH;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnChartRGE1Changing(ChartAnswer value);
        partial void OnChartRGE1Changed();
        partial void OnChartRGE2Changing(ChartAnswer value);
        partial void OnChartRGE2Changed();
        partial void OnChartRGE3Changing(ChartAnswer value);
        partial void OnChartRGE3Changed();
        partial void OnChartRGE4Changing(ChartAnswer value);
        partial void OnChartRGE4Changed();
        partial void OnTableHChanging(List<CheckGraphVyrabRGETableRow> value);
        partial void OnTableHChanged();
        partial void OnTableHHChanging(List<CheckGraphVyrabRGETableRow> value);
        partial void OnTableHHChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="CheckGraphVyrabRGEAnswer"/>.
        /// </summary>
        public CheckGraphVyrabRGEAnswer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ChartRGE1".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer ChartRGE1
        {
            get
            {
                return this._chartRGE1;
            }
            set
            {
                if ((this._chartRGE1 != value))
                {
                    this.OnChartRGE1Changing(value);
                    this.RaiseDataMemberChanging("ChartRGE1");
                    this.ValidateProperty("ChartRGE1", value);
                    this._chartRGE1 = value;
                    this.RaiseDataMemberChanged("ChartRGE1");
                    this.OnChartRGE1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ChartRGE2".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer ChartRGE2
        {
            get
            {
                return this._chartRGE2;
            }
            set
            {
                if ((this._chartRGE2 != value))
                {
                    this.OnChartRGE2Changing(value);
                    this.RaiseDataMemberChanging("ChartRGE2");
                    this.ValidateProperty("ChartRGE2", value);
                    this._chartRGE2 = value;
                    this.RaiseDataMemberChanged("ChartRGE2");
                    this.OnChartRGE2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ChartRGE3".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer ChartRGE3
        {
            get
            {
                return this._chartRGE3;
            }
            set
            {
                if ((this._chartRGE3 != value))
                {
                    this.OnChartRGE3Changing(value);
                    this.RaiseDataMemberChanging("ChartRGE3");
                    this.ValidateProperty("ChartRGE3", value);
                    this._chartRGE3 = value;
                    this.RaiseDataMemberChanged("ChartRGE3");
                    this.OnChartRGE3Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ChartRGE4".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer ChartRGE4
        {
            get
            {
                return this._chartRGE4;
            }
            set
            {
                if ((this._chartRGE4 != value))
                {
                    this.OnChartRGE4Changing(value);
                    this.RaiseDataMemberChanging("ChartRGE4");
                    this.ValidateProperty("ChartRGE4", value);
                    this._chartRGE4 = value;
                    this.RaiseDataMemberChanged("ChartRGE4");
                    this.OnChartRGE4Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TableH".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<CheckGraphVyrabRGETableRow> TableH
        {
            get
            {
                return this._tableH;
            }
            set
            {
                if ((this._tableH != value))
                {
                    this.OnTableHChanging(value);
                    this.RaiseDataMemberChanging("TableH");
                    this.ValidateProperty("TableH", value);
                    this._tableH = value;
                    this.RaiseDataMemberChanged("TableH");
                    this.OnTableHChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TableHH".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<CheckGraphVyrabRGETableRow> TableHH
        {
            get
            {
                return this._tableHH;
            }
            set
            {
                if ((this._tableHH != value))
                {
                    this.OnTableHHChanging(value);
                    this.RaiseDataMemberChanging("TableHH");
                    this.ValidateProperty("TableHH", value);
                    this._tableHH = value;
                    this.RaiseDataMemberChanged("TableHH");
                    this.OnTableHHChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "CheckGraphVyrabRGETableRow".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.PBR")]
    public sealed partial class CheckGraphVyrabRGETableRow : ComplexObject
    {
        
        private double _rge1Diff;
        
        private double _rge1DiffProc;
        
        private double _rge1Fakt;
        
        private double _rge1Plan;
        
        private double _rge2Diff;
        
        private double _rge2DiffProc;
        
        private double _rge2Fakt;
        
        private double _rge2Plan;
        
        private double _rge3Diff;
        
        private double _rge3DiffProc;
        
        private double _rge3Fakt;
        
        private double _rge3Plan;
        
        private double _rge4Diff;
        
        private double _rge4DiffProc;
        
        private double _rge4Fakt;
        
        private double _rge4Plan;
        
        private string _title;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnRGE1DiffChanging(double value);
        partial void OnRGE1DiffChanged();
        partial void OnRGE1DiffProcChanging(double value);
        partial void OnRGE1DiffProcChanged();
        partial void OnRGE1FaktChanging(double value);
        partial void OnRGE1FaktChanged();
        partial void OnRGE1PlanChanging(double value);
        partial void OnRGE1PlanChanged();
        partial void OnRGE2DiffChanging(double value);
        partial void OnRGE2DiffChanged();
        partial void OnRGE2DiffProcChanging(double value);
        partial void OnRGE2DiffProcChanged();
        partial void OnRGE2FaktChanging(double value);
        partial void OnRGE2FaktChanged();
        partial void OnRGE2PlanChanging(double value);
        partial void OnRGE2PlanChanged();
        partial void OnRGE3DiffChanging(double value);
        partial void OnRGE3DiffChanged();
        partial void OnRGE3DiffProcChanging(double value);
        partial void OnRGE3DiffProcChanged();
        partial void OnRGE3FaktChanging(double value);
        partial void OnRGE3FaktChanged();
        partial void OnRGE3PlanChanging(double value);
        partial void OnRGE3PlanChanged();
        partial void OnRGE4DiffChanging(double value);
        partial void OnRGE4DiffChanged();
        partial void OnRGE4DiffProcChanging(double value);
        partial void OnRGE4DiffProcChanged();
        partial void OnRGE4FaktChanging(double value);
        partial void OnRGE4FaktChanged();
        partial void OnRGE4PlanChanging(double value);
        partial void OnRGE4PlanChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="CheckGraphVyrabRGETableRow"/>.
        /// </summary>
        public CheckGraphVyrabRGETableRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE1Diff".
        /// </summary>
        [DataMember()]
        public double RGE1Diff
        {
            get
            {
                return this._rge1Diff;
            }
            set
            {
                if ((this._rge1Diff != value))
                {
                    this.OnRGE1DiffChanging(value);
                    this.RaiseDataMemberChanging("RGE1Diff");
                    this.ValidateProperty("RGE1Diff", value);
                    this._rge1Diff = value;
                    this.RaiseDataMemberChanged("RGE1Diff");
                    this.OnRGE1DiffChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE1DiffProc".
        /// </summary>
        [DataMember()]
        public double RGE1DiffProc
        {
            get
            {
                return this._rge1DiffProc;
            }
            set
            {
                if ((this._rge1DiffProc != value))
                {
                    this.OnRGE1DiffProcChanging(value);
                    this.RaiseDataMemberChanging("RGE1DiffProc");
                    this.ValidateProperty("RGE1DiffProc", value);
                    this._rge1DiffProc = value;
                    this.RaiseDataMemberChanged("RGE1DiffProc");
                    this.OnRGE1DiffProcChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE1Fakt".
        /// </summary>
        [DataMember()]
        public double RGE1Fakt
        {
            get
            {
                return this._rge1Fakt;
            }
            set
            {
                if ((this._rge1Fakt != value))
                {
                    this.OnRGE1FaktChanging(value);
                    this.RaiseDataMemberChanging("RGE1Fakt");
                    this.ValidateProperty("RGE1Fakt", value);
                    this._rge1Fakt = value;
                    this.RaiseDataMemberChanged("RGE1Fakt");
                    this.OnRGE1FaktChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE1Plan".
        /// </summary>
        [DataMember()]
        public double RGE1Plan
        {
            get
            {
                return this._rge1Plan;
            }
            set
            {
                if ((this._rge1Plan != value))
                {
                    this.OnRGE1PlanChanging(value);
                    this.RaiseDataMemberChanging("RGE1Plan");
                    this.ValidateProperty("RGE1Plan", value);
                    this._rge1Plan = value;
                    this.RaiseDataMemberChanged("RGE1Plan");
                    this.OnRGE1PlanChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE2Diff".
        /// </summary>
        [DataMember()]
        public double RGE2Diff
        {
            get
            {
                return this._rge2Diff;
            }
            set
            {
                if ((this._rge2Diff != value))
                {
                    this.OnRGE2DiffChanging(value);
                    this.RaiseDataMemberChanging("RGE2Diff");
                    this.ValidateProperty("RGE2Diff", value);
                    this._rge2Diff = value;
                    this.RaiseDataMemberChanged("RGE2Diff");
                    this.OnRGE2DiffChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE2DiffProc".
        /// </summary>
        [DataMember()]
        public double RGE2DiffProc
        {
            get
            {
                return this._rge2DiffProc;
            }
            set
            {
                if ((this._rge2DiffProc != value))
                {
                    this.OnRGE2DiffProcChanging(value);
                    this.RaiseDataMemberChanging("RGE2DiffProc");
                    this.ValidateProperty("RGE2DiffProc", value);
                    this._rge2DiffProc = value;
                    this.RaiseDataMemberChanged("RGE2DiffProc");
                    this.OnRGE2DiffProcChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE2Fakt".
        /// </summary>
        [DataMember()]
        public double RGE2Fakt
        {
            get
            {
                return this._rge2Fakt;
            }
            set
            {
                if ((this._rge2Fakt != value))
                {
                    this.OnRGE2FaktChanging(value);
                    this.RaiseDataMemberChanging("RGE2Fakt");
                    this.ValidateProperty("RGE2Fakt", value);
                    this._rge2Fakt = value;
                    this.RaiseDataMemberChanged("RGE2Fakt");
                    this.OnRGE2FaktChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE2Plan".
        /// </summary>
        [DataMember()]
        public double RGE2Plan
        {
            get
            {
                return this._rge2Plan;
            }
            set
            {
                if ((this._rge2Plan != value))
                {
                    this.OnRGE2PlanChanging(value);
                    this.RaiseDataMemberChanging("RGE2Plan");
                    this.ValidateProperty("RGE2Plan", value);
                    this._rge2Plan = value;
                    this.RaiseDataMemberChanged("RGE2Plan");
                    this.OnRGE2PlanChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE3Diff".
        /// </summary>
        [DataMember()]
        public double RGE3Diff
        {
            get
            {
                return this._rge3Diff;
            }
            set
            {
                if ((this._rge3Diff != value))
                {
                    this.OnRGE3DiffChanging(value);
                    this.RaiseDataMemberChanging("RGE3Diff");
                    this.ValidateProperty("RGE3Diff", value);
                    this._rge3Diff = value;
                    this.RaiseDataMemberChanged("RGE3Diff");
                    this.OnRGE3DiffChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE3DiffProc".
        /// </summary>
        [DataMember()]
        public double RGE3DiffProc
        {
            get
            {
                return this._rge3DiffProc;
            }
            set
            {
                if ((this._rge3DiffProc != value))
                {
                    this.OnRGE3DiffProcChanging(value);
                    this.RaiseDataMemberChanging("RGE3DiffProc");
                    this.ValidateProperty("RGE3DiffProc", value);
                    this._rge3DiffProc = value;
                    this.RaiseDataMemberChanged("RGE3DiffProc");
                    this.OnRGE3DiffProcChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE3Fakt".
        /// </summary>
        [DataMember()]
        public double RGE3Fakt
        {
            get
            {
                return this._rge3Fakt;
            }
            set
            {
                if ((this._rge3Fakt != value))
                {
                    this.OnRGE3FaktChanging(value);
                    this.RaiseDataMemberChanging("RGE3Fakt");
                    this.ValidateProperty("RGE3Fakt", value);
                    this._rge3Fakt = value;
                    this.RaiseDataMemberChanged("RGE3Fakt");
                    this.OnRGE3FaktChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE3Plan".
        /// </summary>
        [DataMember()]
        public double RGE3Plan
        {
            get
            {
                return this._rge3Plan;
            }
            set
            {
                if ((this._rge3Plan != value))
                {
                    this.OnRGE3PlanChanging(value);
                    this.RaiseDataMemberChanging("RGE3Plan");
                    this.ValidateProperty("RGE3Plan", value);
                    this._rge3Plan = value;
                    this.RaiseDataMemberChanged("RGE3Plan");
                    this.OnRGE3PlanChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE4Diff".
        /// </summary>
        [DataMember()]
        public double RGE4Diff
        {
            get
            {
                return this._rge4Diff;
            }
            set
            {
                if ((this._rge4Diff != value))
                {
                    this.OnRGE4DiffChanging(value);
                    this.RaiseDataMemberChanging("RGE4Diff");
                    this.ValidateProperty("RGE4Diff", value);
                    this._rge4Diff = value;
                    this.RaiseDataMemberChanged("RGE4Diff");
                    this.OnRGE4DiffChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE4DiffProc".
        /// </summary>
        [DataMember()]
        public double RGE4DiffProc
        {
            get
            {
                return this._rge4DiffProc;
            }
            set
            {
                if ((this._rge4DiffProc != value))
                {
                    this.OnRGE4DiffProcChanging(value);
                    this.RaiseDataMemberChanging("RGE4DiffProc");
                    this.ValidateProperty("RGE4DiffProc", value);
                    this._rge4DiffProc = value;
                    this.RaiseDataMemberChanged("RGE4DiffProc");
                    this.OnRGE4DiffProcChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE4Fakt".
        /// </summary>
        [DataMember()]
        public double RGE4Fakt
        {
            get
            {
                return this._rge4Fakt;
            }
            set
            {
                if ((this._rge4Fakt != value))
                {
                    this.OnRGE4FaktChanging(value);
                    this.RaiseDataMemberChanging("RGE4Fakt");
                    this.ValidateProperty("RGE4Fakt", value);
                    this._rge4Fakt = value;
                    this.RaiseDataMemberChanged("RGE4Fakt");
                    this.OnRGE4FaktChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE4Plan".
        /// </summary>
        [DataMember()]
        public double RGE4Plan
        {
            get
            {
                return this._rge4Plan;
            }
            set
            {
                if ((this._rge4Plan != value))
                {
                    this.OnRGE4PlanChanging(value);
                    this.RaiseDataMemberChanging("RGE4Plan");
                    this.ValidateProperty("RGE4Plan", value);
                    this._rge4Plan = value;
                    this.RaiseDataMemberChanged("RGE4Plan");
                    this.OnRGE4PlanChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Title".
        /// </summary>
        [DataMember()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "CheckGraphVyrabTableRow".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.PBR")]
    public sealed partial class CheckGraphVyrabTableRow : ComplexObject
    {
        
        private double _gesDiff;
        
        private double _gesDiffProc;
        
        private double _gesFakt;
        
        private double _gesPlan;
        
        private double _gtp1Diff;
        
        private double _gtp1DiffProc;
        
        private double _gtp1Fakt;
        
        private double _gtp1Plan;
        
        private double _gtp2Diff;
        
        private double _gtp2DiffProc;
        
        private double _gtp2Fakt;
        
        private double _gtp2Plan;
        
        private string _title;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnGESDiffChanging(double value);
        partial void OnGESDiffChanged();
        partial void OnGESDiffProcChanging(double value);
        partial void OnGESDiffProcChanged();
        partial void OnGESFaktChanging(double value);
        partial void OnGESFaktChanged();
        partial void OnGESPlanChanging(double value);
        partial void OnGESPlanChanged();
        partial void OnGTP1DiffChanging(double value);
        partial void OnGTP1DiffChanged();
        partial void OnGTP1DiffProcChanging(double value);
        partial void OnGTP1DiffProcChanged();
        partial void OnGTP1FaktChanging(double value);
        partial void OnGTP1FaktChanged();
        partial void OnGTP1PlanChanging(double value);
        partial void OnGTP1PlanChanged();
        partial void OnGTP2DiffChanging(double value);
        partial void OnGTP2DiffChanged();
        partial void OnGTP2DiffProcChanging(double value);
        partial void OnGTP2DiffProcChanged();
        partial void OnGTP2FaktChanging(double value);
        partial void OnGTP2FaktChanged();
        partial void OnGTP2PlanChanging(double value);
        partial void OnGTP2PlanChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="CheckGraphVyrabTableRow"/>.
        /// </summary>
        public CheckGraphVyrabTableRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GESDiff".
        /// </summary>
        [DataMember()]
        public double GESDiff
        {
            get
            {
                return this._gesDiff;
            }
            set
            {
                if ((this._gesDiff != value))
                {
                    this.OnGESDiffChanging(value);
                    this.RaiseDataMemberChanging("GESDiff");
                    this.ValidateProperty("GESDiff", value);
                    this._gesDiff = value;
                    this.RaiseDataMemberChanged("GESDiff");
                    this.OnGESDiffChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GESDiffProc".
        /// </summary>
        [DataMember()]
        public double GESDiffProc
        {
            get
            {
                return this._gesDiffProc;
            }
            set
            {
                if ((this._gesDiffProc != value))
                {
                    this.OnGESDiffProcChanging(value);
                    this.RaiseDataMemberChanging("GESDiffProc");
                    this.ValidateProperty("GESDiffProc", value);
                    this._gesDiffProc = value;
                    this.RaiseDataMemberChanged("GESDiffProc");
                    this.OnGESDiffProcChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GESFakt".
        /// </summary>
        [DataMember()]
        public double GESFakt
        {
            get
            {
                return this._gesFakt;
            }
            set
            {
                if ((this._gesFakt != value))
                {
                    this.OnGESFaktChanging(value);
                    this.RaiseDataMemberChanging("GESFakt");
                    this.ValidateProperty("GESFakt", value);
                    this._gesFakt = value;
                    this.RaiseDataMemberChanged("GESFakt");
                    this.OnGESFaktChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GESPlan".
        /// </summary>
        [DataMember()]
        public double GESPlan
        {
            get
            {
                return this._gesPlan;
            }
            set
            {
                if ((this._gesPlan != value))
                {
                    this.OnGESPlanChanging(value);
                    this.RaiseDataMemberChanging("GESPlan");
                    this.ValidateProperty("GESPlan", value);
                    this._gesPlan = value;
                    this.RaiseDataMemberChanged("GESPlan");
                    this.OnGESPlanChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GTP1Diff".
        /// </summary>
        [DataMember()]
        public double GTP1Diff
        {
            get
            {
                return this._gtp1Diff;
            }
            set
            {
                if ((this._gtp1Diff != value))
                {
                    this.OnGTP1DiffChanging(value);
                    this.RaiseDataMemberChanging("GTP1Diff");
                    this.ValidateProperty("GTP1Diff", value);
                    this._gtp1Diff = value;
                    this.RaiseDataMemberChanged("GTP1Diff");
                    this.OnGTP1DiffChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GTP1DiffProc".
        /// </summary>
        [DataMember()]
        public double GTP1DiffProc
        {
            get
            {
                return this._gtp1DiffProc;
            }
            set
            {
                if ((this._gtp1DiffProc != value))
                {
                    this.OnGTP1DiffProcChanging(value);
                    this.RaiseDataMemberChanging("GTP1DiffProc");
                    this.ValidateProperty("GTP1DiffProc", value);
                    this._gtp1DiffProc = value;
                    this.RaiseDataMemberChanged("GTP1DiffProc");
                    this.OnGTP1DiffProcChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GTP1Fakt".
        /// </summary>
        [DataMember()]
        public double GTP1Fakt
        {
            get
            {
                return this._gtp1Fakt;
            }
            set
            {
                if ((this._gtp1Fakt != value))
                {
                    this.OnGTP1FaktChanging(value);
                    this.RaiseDataMemberChanging("GTP1Fakt");
                    this.ValidateProperty("GTP1Fakt", value);
                    this._gtp1Fakt = value;
                    this.RaiseDataMemberChanged("GTP1Fakt");
                    this.OnGTP1FaktChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GTP1Plan".
        /// </summary>
        [DataMember()]
        public double GTP1Plan
        {
            get
            {
                return this._gtp1Plan;
            }
            set
            {
                if ((this._gtp1Plan != value))
                {
                    this.OnGTP1PlanChanging(value);
                    this.RaiseDataMemberChanging("GTP1Plan");
                    this.ValidateProperty("GTP1Plan", value);
                    this._gtp1Plan = value;
                    this.RaiseDataMemberChanged("GTP1Plan");
                    this.OnGTP1PlanChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GTP2Diff".
        /// </summary>
        [DataMember()]
        public double GTP2Diff
        {
            get
            {
                return this._gtp2Diff;
            }
            set
            {
                if ((this._gtp2Diff != value))
                {
                    this.OnGTP2DiffChanging(value);
                    this.RaiseDataMemberChanging("GTP2Diff");
                    this.ValidateProperty("GTP2Diff", value);
                    this._gtp2Diff = value;
                    this.RaiseDataMemberChanged("GTP2Diff");
                    this.OnGTP2DiffChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GTP2DiffProc".
        /// </summary>
        [DataMember()]
        public double GTP2DiffProc
        {
            get
            {
                return this._gtp2DiffProc;
            }
            set
            {
                if ((this._gtp2DiffProc != value))
                {
                    this.OnGTP2DiffProcChanging(value);
                    this.RaiseDataMemberChanging("GTP2DiffProc");
                    this.ValidateProperty("GTP2DiffProc", value);
                    this._gtp2DiffProc = value;
                    this.RaiseDataMemberChanged("GTP2DiffProc");
                    this.OnGTP2DiffProcChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GTP2Fakt".
        /// </summary>
        [DataMember()]
        public double GTP2Fakt
        {
            get
            {
                return this._gtp2Fakt;
            }
            set
            {
                if ((this._gtp2Fakt != value))
                {
                    this.OnGTP2FaktChanging(value);
                    this.RaiseDataMemberChanging("GTP2Fakt");
                    this.ValidateProperty("GTP2Fakt", value);
                    this._gtp2Fakt = value;
                    this.RaiseDataMemberChanged("GTP2Fakt");
                    this.OnGTP2FaktChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GTP2Plan".
        /// </summary>
        [DataMember()]
        public double GTP2Plan
        {
            get
            {
                return this._gtp2Plan;
            }
            set
            {
                if ((this._gtp2Plan != value))
                {
                    this.OnGTP2PlanChanging(value);
                    this.RaiseDataMemberChanging("GTP2Plan");
                    this.ValidateProperty("GTP2Plan", value);
                    this._gtp2Plan = value;
                    this.RaiseDataMemberChanged("GTP2Plan");
                    this.OnGTP2PlanChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Title".
        /// </summary>
        [DataMember()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "GraphVyrabAnswer".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.PBR")]
    public sealed partial class GraphVyrabAnswer : ComplexObject
    {
        
        private DateTime _actualDate;
        
        private ChartAnswer _chart;
        
        private List<GraphVyrabTableRow> _tableCurrent;
        
        private List<GraphVyrabTableRow> _tableHour;
        
        private double _vyrabDiff;
        
        private double _vyrabDiffProc;
        
        private double _vyrabFakt;
        
        private double _vyrabPlan;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnActualDateChanging(DateTime value);
        partial void OnActualDateChanged();
        partial void OnChartChanging(ChartAnswer value);
        partial void OnChartChanged();
        partial void OnTableCurrentChanging(List<GraphVyrabTableRow> value);
        partial void OnTableCurrentChanged();
        partial void OnTableHourChanging(List<GraphVyrabTableRow> value);
        partial void OnTableHourChanged();
        partial void OnVyrabDiffChanging(double value);
        partial void OnVyrabDiffChanged();
        partial void OnVyrabDiffProcChanging(double value);
        partial void OnVyrabDiffProcChanged();
        partial void OnVyrabFaktChanging(double value);
        partial void OnVyrabFaktChanged();
        partial void OnVyrabPlanChanging(double value);
        partial void OnVyrabPlanChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="GraphVyrabAnswer"/>.
        /// </summary>
        public GraphVyrabAnswer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ActualDate".
        /// </summary>
        [DataMember()]
        public DateTime ActualDate
        {
            get
            {
                return this._actualDate;
            }
            set
            {
                if ((this._actualDate != value))
                {
                    this.OnActualDateChanging(value);
                    this.RaiseDataMemberChanging("ActualDate");
                    this.ValidateProperty("ActualDate", value);
                    this._actualDate = value;
                    this.RaiseDataMemberChanged("ActualDate");
                    this.OnActualDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Chart".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer Chart
        {
            get
            {
                return this._chart;
            }
            set
            {
                if ((this._chart != value))
                {
                    this.OnChartChanging(value);
                    this.RaiseDataMemberChanging("Chart");
                    this.ValidateProperty("Chart", value);
                    this._chart = value;
                    this.RaiseDataMemberChanged("Chart");
                    this.OnChartChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TableCurrent".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<GraphVyrabTableRow> TableCurrent
        {
            get
            {
                return this._tableCurrent;
            }
            set
            {
                if ((this._tableCurrent != value))
                {
                    this.OnTableCurrentChanging(value);
                    this.RaiseDataMemberChanging("TableCurrent");
                    this.ValidateProperty("TableCurrent", value);
                    this._tableCurrent = value;
                    this.RaiseDataMemberChanged("TableCurrent");
                    this.OnTableCurrentChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TableHour".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<GraphVyrabTableRow> TableHour
        {
            get
            {
                return this._tableHour;
            }
            set
            {
                if ((this._tableHour != value))
                {
                    this.OnTableHourChanging(value);
                    this.RaiseDataMemberChanging("TableHour");
                    this.ValidateProperty("TableHour", value);
                    this._tableHour = value;
                    this.RaiseDataMemberChanged("TableHour");
                    this.OnTableHourChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "VyrabDiff".
        /// </summary>
        [DataMember()]
        public double VyrabDiff
        {
            get
            {
                return this._vyrabDiff;
            }
            set
            {
                if ((this._vyrabDiff != value))
                {
                    this.OnVyrabDiffChanging(value);
                    this.RaiseDataMemberChanging("VyrabDiff");
                    this.ValidateProperty("VyrabDiff", value);
                    this._vyrabDiff = value;
                    this.RaiseDataMemberChanged("VyrabDiff");
                    this.OnVyrabDiffChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "VyrabDiffProc".
        /// </summary>
        [DataMember()]
        public double VyrabDiffProc
        {
            get
            {
                return this._vyrabDiffProc;
            }
            set
            {
                if ((this._vyrabDiffProc != value))
                {
                    this.OnVyrabDiffProcChanging(value);
                    this.RaiseDataMemberChanging("VyrabDiffProc");
                    this.ValidateProperty("VyrabDiffProc", value);
                    this._vyrabDiffProc = value;
                    this.RaiseDataMemberChanged("VyrabDiffProc");
                    this.OnVyrabDiffProcChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "VyrabFakt".
        /// </summary>
        [DataMember()]
        public double VyrabFakt
        {
            get
            {
                return this._vyrabFakt;
            }
            set
            {
                if ((this._vyrabFakt != value))
                {
                    this.OnVyrabFaktChanging(value);
                    this.RaiseDataMemberChanging("VyrabFakt");
                    this.ValidateProperty("VyrabFakt", value);
                    this._vyrabFakt = value;
                    this.RaiseDataMemberChanged("VyrabFakt");
                    this.OnVyrabFaktChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "VyrabPlan".
        /// </summary>
        [DataMember()]
        public double VyrabPlan
        {
            get
            {
                return this._vyrabPlan;
            }
            set
            {
                if ((this._vyrabPlan != value))
                {
                    this.OnVyrabPlanChanging(value);
                    this.RaiseDataMemberChanging("VyrabPlan");
                    this.ValidateProperty("VyrabPlan", value);
                    this._vyrabPlan = value;
                    this.RaiseDataMemberChanged("VyrabPlan");
                    this.OnVyrabPlanChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "GraphVyrabRGEAnswer".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.PBR")]
    public sealed partial class GraphVyrabRGEAnswer : ComplexObject
    {
        
        private DateTime _actualDate;
        
        private ChartAnswer _chartRGE1;
        
        private ChartAnswer _chartRGE2;
        
        private ChartAnswer _chartRGE3;
        
        private ChartAnswer _chartRGE4;
        
        private List<GraphVyrabRGETableRow> _tableCurrent;
        
        private List<GraphVyrabRGETableRow> _tableHour;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnActualDateChanging(DateTime value);
        partial void OnActualDateChanged();
        partial void OnChartRGE1Changing(ChartAnswer value);
        partial void OnChartRGE1Changed();
        partial void OnChartRGE2Changing(ChartAnswer value);
        partial void OnChartRGE2Changed();
        partial void OnChartRGE3Changing(ChartAnswer value);
        partial void OnChartRGE3Changed();
        partial void OnChartRGE4Changing(ChartAnswer value);
        partial void OnChartRGE4Changed();
        partial void OnTableCurrentChanging(List<GraphVyrabRGETableRow> value);
        partial void OnTableCurrentChanged();
        partial void OnTableHourChanging(List<GraphVyrabRGETableRow> value);
        partial void OnTableHourChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="GraphVyrabRGEAnswer"/>.
        /// </summary>
        public GraphVyrabRGEAnswer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ActualDate".
        /// </summary>
        [DataMember()]
        public DateTime ActualDate
        {
            get
            {
                return this._actualDate;
            }
            set
            {
                if ((this._actualDate != value))
                {
                    this.OnActualDateChanging(value);
                    this.RaiseDataMemberChanging("ActualDate");
                    this.ValidateProperty("ActualDate", value);
                    this._actualDate = value;
                    this.RaiseDataMemberChanged("ActualDate");
                    this.OnActualDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ChartRGE1".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer ChartRGE1
        {
            get
            {
                return this._chartRGE1;
            }
            set
            {
                if ((this._chartRGE1 != value))
                {
                    this.OnChartRGE1Changing(value);
                    this.RaiseDataMemberChanging("ChartRGE1");
                    this.ValidateProperty("ChartRGE1", value);
                    this._chartRGE1 = value;
                    this.RaiseDataMemberChanged("ChartRGE1");
                    this.OnChartRGE1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ChartRGE2".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer ChartRGE2
        {
            get
            {
                return this._chartRGE2;
            }
            set
            {
                if ((this._chartRGE2 != value))
                {
                    this.OnChartRGE2Changing(value);
                    this.RaiseDataMemberChanging("ChartRGE2");
                    this.ValidateProperty("ChartRGE2", value);
                    this._chartRGE2 = value;
                    this.RaiseDataMemberChanged("ChartRGE2");
                    this.OnChartRGE2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ChartRGE3".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer ChartRGE3
        {
            get
            {
                return this._chartRGE3;
            }
            set
            {
                if ((this._chartRGE3 != value))
                {
                    this.OnChartRGE3Changing(value);
                    this.RaiseDataMemberChanging("ChartRGE3");
                    this.ValidateProperty("ChartRGE3", value);
                    this._chartRGE3 = value;
                    this.RaiseDataMemberChanged("ChartRGE3");
                    this.OnChartRGE3Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ChartRGE4".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer ChartRGE4
        {
            get
            {
                return this._chartRGE4;
            }
            set
            {
                if ((this._chartRGE4 != value))
                {
                    this.OnChartRGE4Changing(value);
                    this.RaiseDataMemberChanging("ChartRGE4");
                    this.ValidateProperty("ChartRGE4", value);
                    this._chartRGE4 = value;
                    this.RaiseDataMemberChanged("ChartRGE4");
                    this.OnChartRGE4Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TableCurrent".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<GraphVyrabRGETableRow> TableCurrent
        {
            get
            {
                return this._tableCurrent;
            }
            set
            {
                if ((this._tableCurrent != value))
                {
                    this.OnTableCurrentChanging(value);
                    this.RaiseDataMemberChanging("TableCurrent");
                    this.ValidateProperty("TableCurrent", value);
                    this._tableCurrent = value;
                    this.RaiseDataMemberChanged("TableCurrent");
                    this.OnTableCurrentChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TableHour".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<GraphVyrabRGETableRow> TableHour
        {
            get
            {
                return this._tableHour;
            }
            set
            {
                if ((this._tableHour != value))
                {
                    this.OnTableHourChanging(value);
                    this.RaiseDataMemberChanging("TableHour");
                    this.ValidateProperty("TableHour", value);
                    this._tableHour = value;
                    this.RaiseDataMemberChanged("TableHour");
                    this.OnTableHourChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "GraphVyrabRGETableRow".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.PBR")]
    public sealed partial class GraphVyrabRGETableRow : ComplexObject
    {
        
        private string _format;
        
        private double _rge1;
        
        private double _rge2;
        
        private double _rge3;
        
        private double _rge4;
        
        private string _title;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnFormatChanging(string value);
        partial void OnFormatChanged();
        partial void OnRGE1Changing(double value);
        partial void OnRGE1Changed();
        partial void OnRGE2Changing(double value);
        partial void OnRGE2Changed();
        partial void OnRGE3Changing(double value);
        partial void OnRGE3Changed();
        partial void OnRGE4Changing(double value);
        partial void OnRGE4Changed();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="GraphVyrabRGETableRow"/>.
        /// </summary>
        public GraphVyrabRGETableRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Format".
        /// </summary>
        [DataMember()]
        public string Format
        {
            get
            {
                return this._format;
            }
            set
            {
                if ((this._format != value))
                {
                    this.OnFormatChanging(value);
                    this.RaiseDataMemberChanging("Format");
                    this.ValidateProperty("Format", value);
                    this._format = value;
                    this.RaiseDataMemberChanged("Format");
                    this.OnFormatChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE1".
        /// </summary>
        [DataMember()]
        public double RGE1
        {
            get
            {
                return this._rge1;
            }
            set
            {
                if ((this._rge1 != value))
                {
                    this.OnRGE1Changing(value);
                    this.RaiseDataMemberChanging("RGE1");
                    this.ValidateProperty("RGE1", value);
                    this._rge1 = value;
                    this.RaiseDataMemberChanged("RGE1");
                    this.OnRGE1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE2".
        /// </summary>
        [DataMember()]
        public double RGE2
        {
            get
            {
                return this._rge2;
            }
            set
            {
                if ((this._rge2 != value))
                {
                    this.OnRGE2Changing(value);
                    this.RaiseDataMemberChanging("RGE2");
                    this.ValidateProperty("RGE2", value);
                    this._rge2 = value;
                    this.RaiseDataMemberChanged("RGE2");
                    this.OnRGE2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE3".
        /// </summary>
        [DataMember()]
        public double RGE3
        {
            get
            {
                return this._rge3;
            }
            set
            {
                if ((this._rge3 != value))
                {
                    this.OnRGE3Changing(value);
                    this.RaiseDataMemberChanging("RGE3");
                    this.ValidateProperty("RGE3", value);
                    this._rge3 = value;
                    this.RaiseDataMemberChanged("RGE3");
                    this.OnRGE3Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE4".
        /// </summary>
        [DataMember()]
        public double RGE4
        {
            get
            {
                return this._rge4;
            }
            set
            {
                if ((this._rge4 != value))
                {
                    this.OnRGE4Changing(value);
                    this.RaiseDataMemberChanging("RGE4");
                    this.ValidateProperty("RGE4", value);
                    this._rge4 = value;
                    this.RaiseDataMemberChanged("RGE4");
                    this.OnRGE4Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Title".
        /// </summary>
        [DataMember()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "GraphVyrabTableRow".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.PBR")]
    public sealed partial class GraphVyrabTableRow : ComplexObject
    {
        
        private string _format;
        
        private double _ges;
        
        private double _gtp1;
        
        private double _gtp2;
        
        private string _title;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnFormatChanging(string value);
        partial void OnFormatChanged();
        partial void OnGESChanging(double value);
        partial void OnGESChanged();
        partial void OnGTP1Changing(double value);
        partial void OnGTP1Changed();
        partial void OnGTP2Changing(double value);
        partial void OnGTP2Changed();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="GraphVyrabTableRow"/>.
        /// </summary>
        public GraphVyrabTableRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Format".
        /// </summary>
        [DataMember()]
        public string Format
        {
            get
            {
                return this._format;
            }
            set
            {
                if ((this._format != value))
                {
                    this.OnFormatChanging(value);
                    this.RaiseDataMemberChanging("Format");
                    this.ValidateProperty("Format", value);
                    this._format = value;
                    this.RaiseDataMemberChanged("Format");
                    this.OnFormatChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GES".
        /// </summary>
        [DataMember()]
        public double GES
        {
            get
            {
                return this._ges;
            }
            set
            {
                if ((this._ges != value))
                {
                    this.OnGESChanging(value);
                    this.RaiseDataMemberChanging("GES");
                    this.ValidateProperty("GES", value);
                    this._ges = value;
                    this.RaiseDataMemberChanged("GES");
                    this.OnGESChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GTP1".
        /// </summary>
        [DataMember()]
        public double GTP1
        {
            get
            {
                return this._gtp1;
            }
            set
            {
                if ((this._gtp1 != value))
                {
                    this.OnGTP1Changing(value);
                    this.RaiseDataMemberChanging("GTP1");
                    this.ValidateProperty("GTP1", value);
                    this._gtp1 = value;
                    this.RaiseDataMemberChanged("GTP1");
                    this.OnGTP1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GTP2".
        /// </summary>
        [DataMember()]
        public double GTP2
        {
            get
            {
                return this._gtp2;
            }
            set
            {
                if ((this._gtp2 != value))
                {
                    this.OnGTP2Changing(value);
                    this.RaiseDataMemberChanging("GTP2");
                    this.ValidateProperty("GTP2", value);
                    this._gtp2 = value;
                    this.RaiseDataMemberChanged("GTP2");
                    this.OnGTP2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Title".
        /// </summary>
        [DataMember()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
    }
}
namespace VotGES.Piramida.Report
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using VotGES.Chart;
    
    
    public enum FullReportMembersType
    {
        
        min = 0,
        
        max = 1,
        
        avg = 2,
        
        def = 3,
        
        eq = 4,
    }
    
    /// <summary>
    /// Класс "FullReportRecord".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Piramida.Report")]
    public sealed partial class FullReportRecord : ComplexObject
    {
        
        private bool _axis1;
        
        private bool _axis2;
        
        private bool _axis3;
        
        private bool _axis4;
        
        private bool _axis5;
        
        private List<FullReportRecord> _children;
        
        private bool _isGroup;
        
        private string _key;
        
        private bool _selectable;
        
        private bool _selected;
        
        private string _title;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAxis1Changing(bool value);
        partial void OnAxis1Changed();
        partial void OnAxis2Changing(bool value);
        partial void OnAxis2Changed();
        partial void OnAxis3Changing(bool value);
        partial void OnAxis3Changed();
        partial void OnAxis4Changing(bool value);
        partial void OnAxis4Changed();
        partial void OnAxis5Changing(bool value);
        partial void OnAxis5Changed();
        partial void OnChildrenChanging(List<FullReportRecord> value);
        partial void OnChildrenChanged();
        partial void OnIsGroupChanging(bool value);
        partial void OnIsGroupChanged();
        partial void OnKeyChanging(string value);
        partial void OnKeyChanged();
        partial void OnSelectableChanging(bool value);
        partial void OnSelectableChanged();
        partial void OnSelectedChanging(bool value);
        partial void OnSelectedChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="FullReportRecord"/>.
        /// </summary>
        public FullReportRecord()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Axis1".
        /// </summary>
        [DataMember()]
        public bool Axis1
        {
            get
            {
                return this._axis1;
            }
            set
            {
                if ((this._axis1 != value))
                {
                    this.OnAxis1Changing(value);
                    this.RaiseDataMemberChanging("Axis1");
                    this.ValidateProperty("Axis1", value);
                    this._axis1 = value;
                    this.RaiseDataMemberChanged("Axis1");
                    this.OnAxis1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Axis2".
        /// </summary>
        [DataMember()]
        public bool Axis2
        {
            get
            {
                return this._axis2;
            }
            set
            {
                if ((this._axis2 != value))
                {
                    this.OnAxis2Changing(value);
                    this.RaiseDataMemberChanging("Axis2");
                    this.ValidateProperty("Axis2", value);
                    this._axis2 = value;
                    this.RaiseDataMemberChanged("Axis2");
                    this.OnAxis2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Axis3".
        /// </summary>
        [DataMember()]
        public bool Axis3
        {
            get
            {
                return this._axis3;
            }
            set
            {
                if ((this._axis3 != value))
                {
                    this.OnAxis3Changing(value);
                    this.RaiseDataMemberChanging("Axis3");
                    this.ValidateProperty("Axis3", value);
                    this._axis3 = value;
                    this.RaiseDataMemberChanged("Axis3");
                    this.OnAxis3Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Axis4".
        /// </summary>
        [DataMember()]
        public bool Axis4
        {
            get
            {
                return this._axis4;
            }
            set
            {
                if ((this._axis4 != value))
                {
                    this.OnAxis4Changing(value);
                    this.RaiseDataMemberChanging("Axis4");
                    this.ValidateProperty("Axis4", value);
                    this._axis4 = value;
                    this.RaiseDataMemberChanged("Axis4");
                    this.OnAxis4Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Axis5".
        /// </summary>
        [DataMember()]
        public bool Axis5
        {
            get
            {
                return this._axis5;
            }
            set
            {
                if ((this._axis5 != value))
                {
                    this.OnAxis5Changing(value);
                    this.RaiseDataMemberChanging("Axis5");
                    this.ValidateProperty("Axis5", value);
                    this._axis5 = value;
                    this.RaiseDataMemberChanged("Axis5");
                    this.OnAxis5Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Children".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<FullReportRecord> Children
        {
            get
            {
                return this._children;
            }
            set
            {
                if ((this._children != value))
                {
                    this.OnChildrenChanging(value);
                    this.RaiseDataMemberChanging("Children");
                    this.ValidateProperty("Children", value);
                    this._children = value;
                    this.RaiseDataMemberChanged("Children");
                    this.OnChildrenChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsGroup".
        /// </summary>
        [DataMember()]
        public bool IsGroup
        {
            get
            {
                return this._isGroup;
            }
            set
            {
                if ((this._isGroup != value))
                {
                    this.OnIsGroupChanging(value);
                    this.RaiseDataMemberChanging("IsGroup");
                    this.ValidateProperty("IsGroup", value);
                    this._isGroup = value;
                    this.RaiseDataMemberChanged("IsGroup");
                    this.OnIsGroupChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Key".
        /// </summary>
        [DataMember()]
        public string Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.RaiseDataMemberChanging("Key");
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaiseDataMemberChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Selectable".
        /// </summary>
        [DataMember()]
        public bool Selectable
        {
            get
            {
                return this._selectable;
            }
            set
            {
                if ((this._selectable != value))
                {
                    this.OnSelectableChanging(value);
                    this.RaiseDataMemberChanging("Selectable");
                    this.ValidateProperty("Selectable", value);
                    this._selectable = value;
                    this.RaiseDataMemberChanged("Selectable");
                    this.OnSelectableChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Selected".
        /// </summary>
        [DataMember()]
        public bool Selected
        {
            get
            {
                return this._selected;
            }
            set
            {
                if ((this._selected != value))
                {
                    this.OnSelectedChanging(value);
                    this.RaiseDataMemberChanging("Selected");
                    this.ValidateProperty("Selected", value);
                    this._selected = value;
                    this.RaiseDataMemberChanged("Selected");
                    this.OnSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Title".
        /// </summary>
        [DataMember()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "FullReportRoot".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Piramida.Report")]
    public sealed partial class FullReportRoot : ComplexObject
    {
        
        private FullReportRecord _rootLines;
        
        private FullReportRecord _rootMain;
        
        private FullReportRecord _rootSN;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnRootLinesChanging(FullReportRecord value);
        partial void OnRootLinesChanged();
        partial void OnRootMainChanging(FullReportRecord value);
        partial void OnRootMainChanged();
        partial void OnRootSNChanging(FullReportRecord value);
        partial void OnRootSNChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="FullReportRoot"/>.
        /// </summary>
        public FullReportRoot()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RootLines".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public FullReportRecord RootLines
        {
            get
            {
                return this._rootLines;
            }
            set
            {
                if ((this._rootLines != value))
                {
                    this.OnRootLinesChanging(value);
                    this.RaiseDataMemberChanging("RootLines");
                    this.ValidateProperty("RootLines", value);
                    this._rootLines = value;
                    this.RaiseDataMemberChanged("RootLines");
                    this.OnRootLinesChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RootMain".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public FullReportRecord RootMain
        {
            get
            {
                return this._rootMain;
            }
            set
            {
                if ((this._rootMain != value))
                {
                    this.OnRootMainChanging(value);
                    this.RaiseDataMemberChanging("RootMain");
                    this.ValidateProperty("RootMain", value);
                    this._rootMain = value;
                    this.RaiseDataMemberChanged("RootMain");
                    this.OnRootMainChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RootSN".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public FullReportRecord RootSN
        {
            get
            {
                return this._rootSN;
            }
            set
            {
                if ((this._rootSN != value))
                {
                    this.OnRootSNChanging(value);
                    this.RaiseDataMemberChanging("RootSN");
                    this.ValidateProperty("RootSN", value);
                    this._rootSN = value;
                    this.RaiseDataMemberChanged("RootSN");
                    this.OnRootSNChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "ReportAnswer".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Piramida.Report")]
    public sealed partial class ReportAnswer : ComplexObject
    {
        
        private ChartAnswer _chart;
        
        private Dictionary<string, string> _columns;
        
        private List<ReportAnswerRecord> _data;
        
        private Dictionary<string, string> _formats;
        
        private Guid _reportID;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnChartChanging(ChartAnswer value);
        partial void OnChartChanged();
        partial void OnColumnsChanging(Dictionary<string, string> value);
        partial void OnColumnsChanged();
        partial void OnDataChanging(List<ReportAnswerRecord> value);
        partial void OnDataChanged();
        partial void OnFormatsChanging(Dictionary<string, string> value);
        partial void OnFormatsChanged();
        partial void OnReportIDChanging(Guid value);
        partial void OnReportIDChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ReportAnswer"/>.
        /// </summary>
        public ReportAnswer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Chart".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer Chart
        {
            get
            {
                return this._chart;
            }
            set
            {
                if ((this._chart != value))
                {
                    this.OnChartChanging(value);
                    this.RaiseDataMemberChanging("Chart");
                    this.ValidateProperty("Chart", value);
                    this._chart = value;
                    this.RaiseDataMemberChanged("Chart");
                    this.OnChartChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Columns".
        /// </summary>
        [DataMember()]
        public Dictionary<string, string> Columns
        {
            get
            {
                return this._columns;
            }
            set
            {
                if ((this._columns != value))
                {
                    this.OnColumnsChanging(value);
                    this.RaiseDataMemberChanging("Columns");
                    this.ValidateProperty("Columns", value);
                    this._columns = value;
                    this.RaiseDataMemberChanged("Columns");
                    this.OnColumnsChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Data".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<ReportAnswerRecord> Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Formats".
        /// </summary>
        [DataMember()]
        public Dictionary<string, string> Formats
        {
            get
            {
                return this._formats;
            }
            set
            {
                if ((this._formats != value))
                {
                    this.OnFormatsChanging(value);
                    this.RaiseDataMemberChanging("Formats");
                    this.ValidateProperty("Formats", value);
                    this._formats = value;
                    this.RaiseDataMemberChanged("Formats");
                    this.OnFormatsChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ReportID".
        /// </summary>
        [DataMember()]
        public Guid ReportID
        {
            get
            {
                return this._reportID;
            }
            set
            {
                if ((this._reportID != value))
                {
                    this.OnReportIDChanging(value);
                    this.RaiseDataMemberChanging("ReportID");
                    this.ValidateProperty("ReportID", value);
                    this._reportID = value;
                    this.RaiseDataMemberChanged("ReportID");
                    this.OnReportIDChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "ReportAnswerRecord".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Piramida.Report")]
    public sealed partial class ReportAnswerRecord : ComplexObject
    {
        
        private Dictionary<string, double> _dataStr;
        
        private string _header;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnDataStrChanging(Dictionary<string, double> value);
        partial void OnDataStrChanged();
        partial void OnHeaderChanging(string value);
        partial void OnHeaderChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ReportAnswerRecord"/>.
        /// </summary>
        public ReportAnswerRecord()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "DataStr".
        /// </summary>
        [DataMember()]
        public Dictionary<string, double> DataStr
        {
            get
            {
                return this._dataStr;
            }
            set
            {
                if ((this._dataStr != value))
                {
                    this.OnDataStrChanging(value);
                    this.RaiseDataMemberChanging("DataStr");
                    this.ValidateProperty("DataStr", value);
                    this._dataStr = value;
                    this.RaiseDataMemberChanged("DataStr");
                    this.OnDataStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Header".
        /// </summary>
        [DataMember()]
        public string Header
        {
            get
            {
                return this._header;
            }
            set
            {
                if ((this._header != value))
                {
                    this.OnHeaderChanging(value);
                    this.RaiseDataMemberChanging("Header");
                    this.ValidateProperty("Header", value);
                    this._header = value;
                    this.RaiseDataMemberChanged("Header");
                    this.OnHeaderChanged();
                }
            }
        }
    }
    
    public enum ReportTypeEnum
    {
        
        dayByMinutes = 0,
        
        dayByHalfHours = 1,
        
        dayByHours = 2,
        
        monthByDays = 3,
        
        monthByHalfHours = 4,
        
        monthByHours = 5,
        
        quarterByDays = 6,
        
        yearByHalfHours = 7,
        
        yearByHours = 8,
        
        yearByDays = 9,
        
        yearByMonths = 10,
        
        yearByQarters = 11,
        
        years = 12,
        
        day = 13,
        
        month = 14,
        
        quarter = 15,
        
        year = 16,
        
        monthByWeeks = 17,
        
        quarterByWeeks = 18,
        
        yearByWeeks = 19,
    }
}
namespace VotGES.PrognozNB
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using VotGES.Chart;
    
    
    /// <summary>
    /// Класс "PrognozNBByPBRAnswer".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.PrognozNB")]
    public sealed partial class PrognozNBByPBRAnswer : ComplexObject
    {
        
        private ChartAnswer _chart;
        
        private double _nbAvg;
        
        private double _nbMax;
        
        private double _nbMin;
        
        private List<PrognozValue> _prognozValues;
        
        private double _qFakt;
        
        private double _vyrabFakt;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnChartChanging(ChartAnswer value);
        partial void OnChartChanged();
        partial void OnNBAvgChanging(double value);
        partial void OnNBAvgChanged();
        partial void OnNBMaxChanging(double value);
        partial void OnNBMaxChanged();
        partial void OnNBMinChanging(double value);
        partial void OnNBMinChanged();
        partial void OnPrognozValuesChanging(List<PrognozValue> value);
        partial void OnPrognozValuesChanged();
        partial void OnQFaktChanging(double value);
        partial void OnQFaktChanged();
        partial void OnVyrabFaktChanging(double value);
        partial void OnVyrabFaktChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="PrognozNBByPBRAnswer"/>.
        /// </summary>
        public PrognozNBByPBRAnswer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Chart".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer Chart
        {
            get
            {
                return this._chart;
            }
            set
            {
                if ((this._chart != value))
                {
                    this.OnChartChanging(value);
                    this.RaiseDataMemberChanging("Chart");
                    this.ValidateProperty("Chart", value);
                    this._chart = value;
                    this.RaiseDataMemberChanged("Chart");
                    this.OnChartChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "NBAvg".
        /// </summary>
        [DataMember()]
        public double NBAvg
        {
            get
            {
                return this._nbAvg;
            }
            set
            {
                if ((this._nbAvg != value))
                {
                    this.OnNBAvgChanging(value);
                    this.RaiseDataMemberChanging("NBAvg");
                    this.ValidateProperty("NBAvg", value);
                    this._nbAvg = value;
                    this.RaiseDataMemberChanged("NBAvg");
                    this.OnNBAvgChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "NBMax".
        /// </summary>
        [DataMember()]
        public double NBMax
        {
            get
            {
                return this._nbMax;
            }
            set
            {
                if ((this._nbMax != value))
                {
                    this.OnNBMaxChanging(value);
                    this.RaiseDataMemberChanging("NBMax");
                    this.ValidateProperty("NBMax", value);
                    this._nbMax = value;
                    this.RaiseDataMemberChanged("NBMax");
                    this.OnNBMaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "NBMin".
        /// </summary>
        [DataMember()]
        public double NBMin
        {
            get
            {
                return this._nbMin;
            }
            set
            {
                if ((this._nbMin != value))
                {
                    this.OnNBMinChanging(value);
                    this.RaiseDataMemberChanging("NBMin");
                    this.ValidateProperty("NBMin", value);
                    this._nbMin = value;
                    this.RaiseDataMemberChanged("NBMin");
                    this.OnNBMinChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PrognozValues".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<PrognozValue> PrognozValues
        {
            get
            {
                return this._prognozValues;
            }
            set
            {
                if ((this._prognozValues != value))
                {
                    this.OnPrognozValuesChanging(value);
                    this.RaiseDataMemberChanging("PrognozValues");
                    this.ValidateProperty("PrognozValues", value);
                    this._prognozValues = value;
                    this.RaiseDataMemberChanged("PrognozValues");
                    this.OnPrognozValuesChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QFakt".
        /// </summary>
        [DataMember()]
        public double QFakt
        {
            get
            {
                return this._qFakt;
            }
            set
            {
                if ((this._qFakt != value))
                {
                    this.OnQFaktChanging(value);
                    this.RaiseDataMemberChanging("QFakt");
                    this.ValidateProperty("QFakt", value);
                    this._qFakt = value;
                    this.RaiseDataMemberChanged("QFakt");
                    this.OnQFaktChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "VyrabFakt".
        /// </summary>
        [DataMember()]
        public double VyrabFakt
        {
            get
            {
                return this._vyrabFakt;
            }
            set
            {
                if ((this._vyrabFakt != value))
                {
                    this.OnVyrabFaktChanging(value);
                    this.RaiseDataMemberChanging("VyrabFakt");
                    this.ValidateProperty("VyrabFakt", value);
                    this._vyrabFakt = value;
                    this.RaiseDataMemberChanged("VyrabFakt");
                    this.OnVyrabFaktChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "PrognozValue".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.PrognozNB")]
    public sealed partial class PrognozValue : ComplexObject
    {
        
        private DateTime _date;
        
        private double _nbAvg;
        
        private double _nbMax;
        
        private double _nbMin;
        
        private double _qAvg;
        
        private double _vyrab;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnNBAvgChanging(double value);
        partial void OnNBAvgChanged();
        partial void OnNBMaxChanging(double value);
        partial void OnNBMaxChanged();
        partial void OnNBMinChanging(double value);
        partial void OnNBMinChanged();
        partial void OnQAvgChanging(double value);
        partial void OnQAvgChanged();
        partial void OnVyrabChanging(double value);
        partial void OnVyrabChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="PrognozValue"/>.
        /// </summary>
        public PrognozValue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Date".
        /// </summary>
        [DataMember()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "NBAvg".
        /// </summary>
        [DataMember()]
        public double NBAvg
        {
            get
            {
                return this._nbAvg;
            }
            set
            {
                if ((this._nbAvg != value))
                {
                    this.OnNBAvgChanging(value);
                    this.RaiseDataMemberChanging("NBAvg");
                    this.ValidateProperty("NBAvg", value);
                    this._nbAvg = value;
                    this.RaiseDataMemberChanged("NBAvg");
                    this.OnNBAvgChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "NBMax".
        /// </summary>
        [DataMember()]
        public double NBMax
        {
            get
            {
                return this._nbMax;
            }
            set
            {
                if ((this._nbMax != value))
                {
                    this.OnNBMaxChanging(value);
                    this.RaiseDataMemberChanging("NBMax");
                    this.ValidateProperty("NBMax", value);
                    this._nbMax = value;
                    this.RaiseDataMemberChanged("NBMax");
                    this.OnNBMaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "NBMin".
        /// </summary>
        [DataMember()]
        public double NBMin
        {
            get
            {
                return this._nbMin;
            }
            set
            {
                if ((this._nbMin != value))
                {
                    this.OnNBMinChanging(value);
                    this.RaiseDataMemberChanging("NBMin");
                    this.ValidateProperty("NBMin", value);
                    this._nbMin = value;
                    this.RaiseDataMemberChanged("NBMin");
                    this.OnNBMinChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QAvg".
        /// </summary>
        [DataMember()]
        public double QAvg
        {
            get
            {
                return this._qAvg;
            }
            set
            {
                if ((this._qAvg != value))
                {
                    this.OnQAvgChanging(value);
                    this.RaiseDataMemberChanging("QAvg");
                    this.ValidateProperty("QAvg", value);
                    this._qAvg = value;
                    this.RaiseDataMemberChanged("QAvg");
                    this.OnQAvgChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Vyrab".
        /// </summary>
        [DataMember()]
        public double Vyrab
        {
            get
            {
                return this._vyrab;
            }
            set
            {
                if ((this._vyrab != value))
                {
                    this.OnVyrabChanging(value);
                    this.RaiseDataMemberChanging("Vyrab");
                    this.ValidateProperty("Vyrab", value);
                    this._vyrab = value;
                    this.RaiseDataMemberChanged("Vyrab");
                    this.OnVyrabChanged();
                }
            }
        }
    }
}
namespace VotGES.Rashod
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    public enum RHChartType
    {
        
        GA_QotP = 0,
        
        GA_KPDotP = 1,
        
        GA_QotH = 2,
        
        GA_KPDotH = 3,
        
        CMPGA_QotP = 4,
        
        CMPGA_KPDotP = 5,
        
        CMPGA_QotH = 6,
        
        CMPGA_KPDotH = 7,
        
        CMPST_QotP = 8,
        
        CMPST_KPDotP = 9,
        
        CMPST_QotH = 10,
        
        CMPST_KPDotH = 11,
        
        KPD_Line = 12,
    }
}
namespace VotGES.Web.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using VotGES.Chart;
    using VotGES.OgranGA;
    
    
    /// <summary>
    /// Класс "FullResultRUSARecord".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Web.Models")]
    public sealed partial class FullResultRUSARecord : ComplexObject
    {
        
        private int _countGA;
        
        private List<RUSAResult> _data;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnCountGAChanging(int value);
        partial void OnCountGAChanged();
        partial void OnDataChanging(List<RUSAResult> value);
        partial void OnDataChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="FullResultRUSARecord"/>.
        /// </summary>
        public FullResultRUSARecord()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CountGA".
        /// </summary>
        [DataMember()]
        public int CountGA
        {
            get
            {
                return this._countGA;
            }
            set
            {
                if ((this._countGA != value))
                {
                    this.OnCountGAChanging(value);
                    this.RaiseDataMemberChanging("CountGA");
                    this.ValidateProperty("CountGA", value);
                    this._countGA = value;
                    this.RaiseDataMemberChanged("CountGA");
                    this.OnCountGAChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Data".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<RUSAResult> Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "GAParams".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Web.Models")]
    public sealed partial class GAParams : ComplexObject
    {
        
        private bool _avail;
        
        private int _gaNumber;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAvailChanging(bool value);
        partial void OnAvailChanged();
        partial void OnGaNumberChanging(int value);
        partial void OnGaNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="GAParams"/>.
        /// </summary>
        public GAParams()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Avail".
        /// </summary>
        [DataMember()]
        public bool Avail
        {
            get
            {
                return this._avail;
            }
            set
            {
                if ((this._avail != value))
                {
                    this.OnAvailChanging(value);
                    this.RaiseDataMemberChanging("Avail");
                    this.ValidateProperty("Avail", value);
                    this._avail = value;
                    this.RaiseDataMemberChanged("Avail");
                    this.OnAvailChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GaNumber".
        /// </summary>
        [DataMember()]
        public int GaNumber
        {
            get
            {
                return this._gaNumber;
            }
            set
            {
                if ((this._gaNumber != value))
                {
                    this.OnGaNumberChanging(value);
                    this.RaiseDataMemberChanging("GaNumber");
                    this.ValidateProperty("GaNumber", value);
                    this._gaNumber = value;
                    this.RaiseDataMemberChanged("GaNumber");
                    this.OnGaNumberChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "Maket8HoursData".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Web.Models")]
    public sealed partial class Maket8HoursData : ComplexObject
    {
        
        private double _p8HoursGES;
        
        private double _p8HoursGTP1;
        
        private double _p8HoursGTP2;
        
        private double _powerTime;
        
        private double _pPikGES;
        
        private double _pPikGTP1;
        
        private double _pPikGTP2;
        
        private double _pRaspGES;
        
        private double _pRaspGTP1;
        
        private double _pRaspGTP2;
        
        private double _rashodGES;
        
        private double _rashodGTP1;
        
        private double _rashodGTP2;
        
        private double _rashodTime;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnP8HoursGESChanging(double value);
        partial void OnP8HoursGESChanged();
        partial void OnP8HoursGTP1Changing(double value);
        partial void OnP8HoursGTP1Changed();
        partial void OnP8HoursGTP2Changing(double value);
        partial void OnP8HoursGTP2Changed();
        partial void OnPowerTimeChanging(double value);
        partial void OnPowerTimeChanged();
        partial void OnPPikGESChanging(double value);
        partial void OnPPikGESChanged();
        partial void OnPPikGTP1Changing(double value);
        partial void OnPPikGTP1Changed();
        partial void OnPPikGTP2Changing(double value);
        partial void OnPPikGTP2Changed();
        partial void OnPRaspGESChanging(double value);
        partial void OnPRaspGESChanged();
        partial void OnPRaspGTP1Changing(double value);
        partial void OnPRaspGTP1Changed();
        partial void OnPRaspGTP2Changing(double value);
        partial void OnPRaspGTP2Changed();
        partial void OnRashodGESChanging(double value);
        partial void OnRashodGESChanged();
        partial void OnRashodGTP1Changing(double value);
        partial void OnRashodGTP1Changed();
        partial void OnRashodGTP2Changing(double value);
        partial void OnRashodGTP2Changed();
        partial void OnRashodTimeChanging(double value);
        partial void OnRashodTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Maket8HoursData"/>.
        /// </summary>
        public Maket8HoursData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "P8HoursGES".
        /// </summary>
        [DataMember()]
        public double P8HoursGES
        {
            get
            {
                return this._p8HoursGES;
            }
            set
            {
                if ((this._p8HoursGES != value))
                {
                    this.OnP8HoursGESChanging(value);
                    this.RaiseDataMemberChanging("P8HoursGES");
                    this.ValidateProperty("P8HoursGES", value);
                    this._p8HoursGES = value;
                    this.RaiseDataMemberChanged("P8HoursGES");
                    this.OnP8HoursGESChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "P8HoursGTP1".
        /// </summary>
        [DataMember()]
        public double P8HoursGTP1
        {
            get
            {
                return this._p8HoursGTP1;
            }
            set
            {
                if ((this._p8HoursGTP1 != value))
                {
                    this.OnP8HoursGTP1Changing(value);
                    this.RaiseDataMemberChanging("P8HoursGTP1");
                    this.ValidateProperty("P8HoursGTP1", value);
                    this._p8HoursGTP1 = value;
                    this.RaiseDataMemberChanged("P8HoursGTP1");
                    this.OnP8HoursGTP1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "P8HoursGTP2".
        /// </summary>
        [DataMember()]
        public double P8HoursGTP2
        {
            get
            {
                return this._p8HoursGTP2;
            }
            set
            {
                if ((this._p8HoursGTP2 != value))
                {
                    this.OnP8HoursGTP2Changing(value);
                    this.RaiseDataMemberChanging("P8HoursGTP2");
                    this.ValidateProperty("P8HoursGTP2", value);
                    this._p8HoursGTP2 = value;
                    this.RaiseDataMemberChanged("P8HoursGTP2");
                    this.OnP8HoursGTP2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PowerTime".
        /// </summary>
        [DataMember()]
        public double PowerTime
        {
            get
            {
                return this._powerTime;
            }
            set
            {
                if ((this._powerTime != value))
                {
                    this.OnPowerTimeChanging(value);
                    this.RaiseDataMemberChanging("PowerTime");
                    this.ValidateProperty("PowerTime", value);
                    this._powerTime = value;
                    this.RaiseDataMemberChanged("PowerTime");
                    this.OnPowerTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PPikGES".
        /// </summary>
        [DataMember()]
        public double PPikGES
        {
            get
            {
                return this._pPikGES;
            }
            set
            {
                if ((this._pPikGES != value))
                {
                    this.OnPPikGESChanging(value);
                    this.RaiseDataMemberChanging("PPikGES");
                    this.ValidateProperty("PPikGES", value);
                    this._pPikGES = value;
                    this.RaiseDataMemberChanged("PPikGES");
                    this.OnPPikGESChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PPikGTP1".
        /// </summary>
        [DataMember()]
        public double PPikGTP1
        {
            get
            {
                return this._pPikGTP1;
            }
            set
            {
                if ((this._pPikGTP1 != value))
                {
                    this.OnPPikGTP1Changing(value);
                    this.RaiseDataMemberChanging("PPikGTP1");
                    this.ValidateProperty("PPikGTP1", value);
                    this._pPikGTP1 = value;
                    this.RaiseDataMemberChanged("PPikGTP1");
                    this.OnPPikGTP1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PPikGTP2".
        /// </summary>
        [DataMember()]
        public double PPikGTP2
        {
            get
            {
                return this._pPikGTP2;
            }
            set
            {
                if ((this._pPikGTP2 != value))
                {
                    this.OnPPikGTP2Changing(value);
                    this.RaiseDataMemberChanging("PPikGTP2");
                    this.ValidateProperty("PPikGTP2", value);
                    this._pPikGTP2 = value;
                    this.RaiseDataMemberChanged("PPikGTP2");
                    this.OnPPikGTP2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PRaspGES".
        /// </summary>
        [DataMember()]
        public double PRaspGES
        {
            get
            {
                return this._pRaspGES;
            }
            set
            {
                if ((this._pRaspGES != value))
                {
                    this.OnPRaspGESChanging(value);
                    this.RaiseDataMemberChanging("PRaspGES");
                    this.ValidateProperty("PRaspGES", value);
                    this._pRaspGES = value;
                    this.RaiseDataMemberChanged("PRaspGES");
                    this.OnPRaspGESChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PRaspGTP1".
        /// </summary>
        [DataMember()]
        public double PRaspGTP1
        {
            get
            {
                return this._pRaspGTP1;
            }
            set
            {
                if ((this._pRaspGTP1 != value))
                {
                    this.OnPRaspGTP1Changing(value);
                    this.RaiseDataMemberChanging("PRaspGTP1");
                    this.ValidateProperty("PRaspGTP1", value);
                    this._pRaspGTP1 = value;
                    this.RaiseDataMemberChanged("PRaspGTP1");
                    this.OnPRaspGTP1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PRaspGTP2".
        /// </summary>
        [DataMember()]
        public double PRaspGTP2
        {
            get
            {
                return this._pRaspGTP2;
            }
            set
            {
                if ((this._pRaspGTP2 != value))
                {
                    this.OnPRaspGTP2Changing(value);
                    this.RaiseDataMemberChanging("PRaspGTP2");
                    this.ValidateProperty("PRaspGTP2", value);
                    this._pRaspGTP2 = value;
                    this.RaiseDataMemberChanged("PRaspGTP2");
                    this.OnPRaspGTP2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RashodGES".
        /// </summary>
        [DataMember()]
        public double RashodGES
        {
            get
            {
                return this._rashodGES;
            }
            set
            {
                if ((this._rashodGES != value))
                {
                    this.OnRashodGESChanging(value);
                    this.RaiseDataMemberChanging("RashodGES");
                    this.ValidateProperty("RashodGES", value);
                    this._rashodGES = value;
                    this.RaiseDataMemberChanged("RashodGES");
                    this.OnRashodGESChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RashodGTP1".
        /// </summary>
        [DataMember()]
        public double RashodGTP1
        {
            get
            {
                return this._rashodGTP1;
            }
            set
            {
                if ((this._rashodGTP1 != value))
                {
                    this.OnRashodGTP1Changing(value);
                    this.RaiseDataMemberChanging("RashodGTP1");
                    this.ValidateProperty("RashodGTP1", value);
                    this._rashodGTP1 = value;
                    this.RaiseDataMemberChanged("RashodGTP1");
                    this.OnRashodGTP1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RashodGTP2".
        /// </summary>
        [DataMember()]
        public double RashodGTP2
        {
            get
            {
                return this._rashodGTP2;
            }
            set
            {
                if ((this._rashodGTP2 != value))
                {
                    this.OnRashodGTP2Changing(value);
                    this.RaiseDataMemberChanging("RashodGTP2");
                    this.ValidateProperty("RashodGTP2", value);
                    this._rashodGTP2 = value;
                    this.RaiseDataMemberChanged("RashodGTP2");
                    this.OnRashodGTP2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RashodTime".
        /// </summary>
        [DataMember()]
        public double RashodTime
        {
            get
            {
                return this._rashodTime;
            }
            set
            {
                if ((this._rashodTime != value))
                {
                    this.OnRashodTimeChanging(value);
                    this.RaiseDataMemberChanging("RashodTime");
                    this.ValidateProperty("RashodTime", value);
                    this._rashodTime = value;
                    this.RaiseDataMemberChanged("RashodTime");
                    this.OnRashodTimeChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "OgranGAAnswer".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Web.Models")]
    public sealed partial class OgranGAAnswer : ComplexObject
    {
        
        private ChartAnswer _chartAnswer;
        
        private ChartDataSerie _currentData;
        
        private double _currentKPD;
        
        private double _currentNapor;
        
        private double _currentOtkrNA;
        
        private double _currentP;
        
        private double _currentRashod;
        
        private double _currentUgolRK;
        
        private OgranGARecord _dayStartRecord;
        
        private OgranGARecord _expStartRecord;
        
        private OgranGARecord _krRecord;
        
        private OgranGARecord _monthStartRecord;
        
        private OgranGARecord _yearStartRecord;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnChartAnswerChanging(ChartAnswer value);
        partial void OnChartAnswerChanged();
        partial void OnCurrentDataChanging(ChartDataSerie value);
        partial void OnCurrentDataChanged();
        partial void OnCurrentKPDChanging(double value);
        partial void OnCurrentKPDChanged();
        partial void OnCurrentNaporChanging(double value);
        partial void OnCurrentNaporChanged();
        partial void OnCurrentOtkrNAChanging(double value);
        partial void OnCurrentOtkrNAChanged();
        partial void OnCurrentPChanging(double value);
        partial void OnCurrentPChanged();
        partial void OnCurrentRashodChanging(double value);
        partial void OnCurrentRashodChanged();
        partial void OnCurrentUgolRKChanging(double value);
        partial void OnCurrentUgolRKChanged();
        partial void OnDayStartRecordChanging(OgranGARecord value);
        partial void OnDayStartRecordChanged();
        partial void OnExpStartRecordChanging(OgranGARecord value);
        partial void OnExpStartRecordChanged();
        partial void OnKRRecordChanging(OgranGARecord value);
        partial void OnKRRecordChanged();
        partial void OnMonthStartRecordChanging(OgranGARecord value);
        partial void OnMonthStartRecordChanged();
        partial void OnYearStartRecordChanging(OgranGARecord value);
        partial void OnYearStartRecordChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="OgranGAAnswer"/>.
        /// </summary>
        public OgranGAAnswer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ChartAnswer".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartAnswer ChartAnswer
        {
            get
            {
                return this._chartAnswer;
            }
            set
            {
                if ((this._chartAnswer != value))
                {
                    this.OnChartAnswerChanging(value);
                    this.RaiseDataMemberChanging("ChartAnswer");
                    this.ValidateProperty("ChartAnswer", value);
                    this._chartAnswer = value;
                    this.RaiseDataMemberChanged("ChartAnswer");
                    this.OnChartAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CurrentData".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ChartDataSerie CurrentData
        {
            get
            {
                return this._currentData;
            }
            set
            {
                if ((this._currentData != value))
                {
                    this.OnCurrentDataChanging(value);
                    this.RaiseDataMemberChanging("CurrentData");
                    this.ValidateProperty("CurrentData", value);
                    this._currentData = value;
                    this.RaiseDataMemberChanged("CurrentData");
                    this.OnCurrentDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CurrentKPD".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double CurrentKPD
        {
            get
            {
                return this._currentKPD;
            }
            set
            {
                if ((this._currentKPD != value))
                {
                    this.OnCurrentKPDChanging(value);
                    this.ValidateProperty("CurrentKPD", value);
                    this._currentKPD = value;
                    this.RaisePropertyChanged("CurrentKPD");
                    this.OnCurrentKPDChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CurrentNapor".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double CurrentNapor
        {
            get
            {
                return this._currentNapor;
            }
            set
            {
                if ((this._currentNapor != value))
                {
                    this.OnCurrentNaporChanging(value);
                    this.ValidateProperty("CurrentNapor", value);
                    this._currentNapor = value;
                    this.RaisePropertyChanged("CurrentNapor");
                    this.OnCurrentNaporChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CurrentOtkrNA".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double CurrentOtkrNA
        {
            get
            {
                return this._currentOtkrNA;
            }
            set
            {
                if ((this._currentOtkrNA != value))
                {
                    this.OnCurrentOtkrNAChanging(value);
                    this.ValidateProperty("CurrentOtkrNA", value);
                    this._currentOtkrNA = value;
                    this.RaisePropertyChanged("CurrentOtkrNA");
                    this.OnCurrentOtkrNAChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CurrentP".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double CurrentP
        {
            get
            {
                return this._currentP;
            }
            set
            {
                if ((this._currentP != value))
                {
                    this.OnCurrentPChanging(value);
                    this.ValidateProperty("CurrentP", value);
                    this._currentP = value;
                    this.RaisePropertyChanged("CurrentP");
                    this.OnCurrentPChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CurrentRashod".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double CurrentRashod
        {
            get
            {
                return this._currentRashod;
            }
            set
            {
                if ((this._currentRashod != value))
                {
                    this.OnCurrentRashodChanging(value);
                    this.ValidateProperty("CurrentRashod", value);
                    this._currentRashod = value;
                    this.RaisePropertyChanged("CurrentRashod");
                    this.OnCurrentRashodChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CurrentUgolRK".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double CurrentUgolRK
        {
            get
            {
                return this._currentUgolRK;
            }
            set
            {
                if ((this._currentUgolRK != value))
                {
                    this.OnCurrentUgolRKChanging(value);
                    this.ValidateProperty("CurrentUgolRK", value);
                    this._currentUgolRK = value;
                    this.RaisePropertyChanged("CurrentUgolRK");
                    this.OnCurrentUgolRKChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "DayStartRecord".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false)]
        [ReadOnly(true)]
        public OgranGARecord DayStartRecord
        {
            get
            {
                return this._dayStartRecord;
            }
            set
            {
                if ((this._dayStartRecord != value))
                {
                    this.OnDayStartRecordChanging(value);
                    this.ValidateProperty("DayStartRecord", value);
                    this._dayStartRecord = value;
                    this.RaisePropertyChanged("DayStartRecord");
                    this.OnDayStartRecordChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ExpStartRecord".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false)]
        [ReadOnly(true)]
        public OgranGARecord ExpStartRecord
        {
            get
            {
                return this._expStartRecord;
            }
            set
            {
                if ((this._expStartRecord != value))
                {
                    this.OnExpStartRecordChanging(value);
                    this.ValidateProperty("ExpStartRecord", value);
                    this._expStartRecord = value;
                    this.RaisePropertyChanged("ExpStartRecord");
                    this.OnExpStartRecordChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "KRRecord".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false)]
        [ReadOnly(true)]
        public OgranGARecord KRRecord
        {
            get
            {
                return this._krRecord;
            }
            set
            {
                if ((this._krRecord != value))
                {
                    this.OnKRRecordChanging(value);
                    this.ValidateProperty("KRRecord", value);
                    this._krRecord = value;
                    this.RaisePropertyChanged("KRRecord");
                    this.OnKRRecordChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "MonthStartRecord".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false)]
        [ReadOnly(true)]
        public OgranGARecord MonthStartRecord
        {
            get
            {
                return this._monthStartRecord;
            }
            set
            {
                if ((this._monthStartRecord != value))
                {
                    this.OnMonthStartRecordChanging(value);
                    this.ValidateProperty("MonthStartRecord", value);
                    this._monthStartRecord = value;
                    this.RaisePropertyChanged("MonthStartRecord");
                    this.OnMonthStartRecordChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "YearStartRecord".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false)]
        [ReadOnly(true)]
        public OgranGARecord YearStartRecord
        {
            get
            {
                return this._yearStartRecord;
            }
            set
            {
                if ((this._yearStartRecord != value))
                {
                    this.OnYearStartRecordChanging(value);
                    this.ValidateProperty("YearStartRecord", value);
                    this._yearStartRecord = value;
                    this.RaisePropertyChanged("YearStartRecord");
                    this.OnYearStartRecordChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "RashodHarsData".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Web.Models")]
    public sealed partial class RashodHarsData : ComplexObject
    {
        
        private int _gaNumber;
        
        private Dictionary<int, string> _gaNumbers;
        
        private Guid _id;
        
        private Maket8HoursData _maket;
        
        private bool _maket8Optim;
        
        private double _napor;
        
        private int _needTime;
        
        private double _pgtp1;
        
        private double _power;
        
        private double _pRaspGTP1;
        
        private double _pRaspGTP2;
        
        private double _rashod;
        
        private double _rashod0;
        
        private double _rashodFavr;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnGANumberChanging(int value);
        partial void OnGANumberChanged();
        partial void OnGANumbersChanging(Dictionary<int, string> value);
        partial void OnGANumbersChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnMaketChanging(Maket8HoursData value);
        partial void OnMaketChanged();
        partial void OnMaket8OptimChanging(bool value);
        partial void OnMaket8OptimChanged();
        partial void OnNaporChanging(double value);
        partial void OnNaporChanged();
        partial void OnNeedTimeChanging(int value);
        partial void OnNeedTimeChanged();
        partial void OnPGTP1Changing(double value);
        partial void OnPGTP1Changed();
        partial void OnPowerChanging(double value);
        partial void OnPowerChanged();
        partial void OnPRaspGTP1Changing(double value);
        partial void OnPRaspGTP1Changed();
        partial void OnPRaspGTP2Changing(double value);
        partial void OnPRaspGTP2Changed();
        partial void OnRashodChanging(double value);
        partial void OnRashodChanged();
        partial void OnRashod0Changing(double value);
        partial void OnRashod0Changed();
        partial void OnRashodFavrChanging(double value);
        partial void OnRashodFavrChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RashodHarsData"/>.
        /// </summary>
        public RashodHarsData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GANumber".
        /// </summary>
        [DataMember()]
        public int GANumber
        {
            get
            {
                return this._gaNumber;
            }
            set
            {
                if ((this._gaNumber != value))
                {
                    this.OnGANumberChanging(value);
                    this.RaiseDataMemberChanging("GANumber");
                    this.ValidateProperty("GANumber", value);
                    this._gaNumber = value;
                    this.RaiseDataMemberChanged("GANumber");
                    this.OnGANumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GANumbers".
        /// </summary>
        [DataMember()]
        public Dictionary<int, string> GANumbers
        {
            get
            {
                return this._gaNumbers;
            }
            set
            {
                if ((this._gaNumbers != value))
                {
                    this.OnGANumbersChanging(value);
                    this.RaiseDataMemberChanging("GANumbers");
                    this.ValidateProperty("GANumbers", value);
                    this._gaNumbers = value;
                    this.RaiseDataMemberChanged("GANumbers");
                    this.OnGANumbersChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DataMember()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Maket".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public Maket8HoursData Maket
        {
            get
            {
                return this._maket;
            }
            set
            {
                if ((this._maket != value))
                {
                    this.OnMaketChanging(value);
                    this.RaiseDataMemberChanging("Maket");
                    this.ValidateProperty("Maket", value);
                    this._maket = value;
                    this.RaiseDataMemberChanged("Maket");
                    this.OnMaketChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Maket8Optim".
        /// </summary>
        [DataMember()]
        public bool Maket8Optim
        {
            get
            {
                return this._maket8Optim;
            }
            set
            {
                if ((this._maket8Optim != value))
                {
                    this.OnMaket8OptimChanging(value);
                    this.RaiseDataMemberChanging("Maket8Optim");
                    this.ValidateProperty("Maket8Optim", value);
                    this._maket8Optim = value;
                    this.RaiseDataMemberChanged("Maket8Optim");
                    this.OnMaket8OptimChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Napor".
        /// </summary>
        [DataMember()]
        public double Napor
        {
            get
            {
                return this._napor;
            }
            set
            {
                if ((this._napor != value))
                {
                    this.OnNaporChanging(value);
                    this.RaiseDataMemberChanging("Napor");
                    this.ValidateProperty("Napor", value);
                    this._napor = value;
                    this.RaiseDataMemberChanged("Napor");
                    this.OnNaporChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "NeedTime".
        /// </summary>
        [DataMember()]
        public int NeedTime
        {
            get
            {
                return this._needTime;
            }
            set
            {
                if ((this._needTime != value))
                {
                    this.OnNeedTimeChanging(value);
                    this.RaiseDataMemberChanging("NeedTime");
                    this.ValidateProperty("NeedTime", value);
                    this._needTime = value;
                    this.RaiseDataMemberChanged("NeedTime");
                    this.OnNeedTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PGTP1".
        /// </summary>
        [DataMember()]
        public double PGTP1
        {
            get
            {
                return this._pgtp1;
            }
            set
            {
                if ((this._pgtp1 != value))
                {
                    this.OnPGTP1Changing(value);
                    this.RaiseDataMemberChanging("PGTP1");
                    this.ValidateProperty("PGTP1", value);
                    this._pgtp1 = value;
                    this.RaiseDataMemberChanged("PGTP1");
                    this.OnPGTP1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Power".
        /// </summary>
        [DataMember()]
        public double Power
        {
            get
            {
                return this._power;
            }
            set
            {
                if ((this._power != value))
                {
                    this.OnPowerChanging(value);
                    this.RaiseDataMemberChanging("Power");
                    this.ValidateProperty("Power", value);
                    this._power = value;
                    this.RaiseDataMemberChanged("Power");
                    this.OnPowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PRaspGTP1".
        /// </summary>
        [DataMember()]
        public double PRaspGTP1
        {
            get
            {
                return this._pRaspGTP1;
            }
            set
            {
                if ((this._pRaspGTP1 != value))
                {
                    this.OnPRaspGTP1Changing(value);
                    this.RaiseDataMemberChanging("PRaspGTP1");
                    this.ValidateProperty("PRaspGTP1", value);
                    this._pRaspGTP1 = value;
                    this.RaiseDataMemberChanged("PRaspGTP1");
                    this.OnPRaspGTP1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PRaspGTP2".
        /// </summary>
        [DataMember()]
        public double PRaspGTP2
        {
            get
            {
                return this._pRaspGTP2;
            }
            set
            {
                if ((this._pRaspGTP2 != value))
                {
                    this.OnPRaspGTP2Changing(value);
                    this.RaiseDataMemberChanging("PRaspGTP2");
                    this.ValidateProperty("PRaspGTP2", value);
                    this._pRaspGTP2 = value;
                    this.RaiseDataMemberChanged("PRaspGTP2");
                    this.OnPRaspGTP2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Rashod".
        /// </summary>
        [DataMember()]
        public double Rashod
        {
            get
            {
                return this._rashod;
            }
            set
            {
                if ((this._rashod != value))
                {
                    this.OnRashodChanging(value);
                    this.RaiseDataMemberChanging("Rashod");
                    this.ValidateProperty("Rashod", value);
                    this._rashod = value;
                    this.RaiseDataMemberChanged("Rashod");
                    this.OnRashodChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Rashod0".
        /// </summary>
        [DataMember()]
        public double Rashod0
        {
            get
            {
                return this._rashod0;
            }
            set
            {
                if ((this._rashod0 != value))
                {
                    this.OnRashod0Changing(value);
                    this.RaiseDataMemberChanging("Rashod0");
                    this.ValidateProperty("Rashod0", value);
                    this._rashod0 = value;
                    this.RaiseDataMemberChanged("Rashod0");
                    this.OnRashod0Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RashodFavr".
        /// </summary>
        [DataMember()]
        public double RashodFavr
        {
            get
            {
                return this._rashodFavr;
            }
            set
            {
                if ((this._rashodFavr != value))
                {
                    this.OnRashodFavrChanging(value);
                    this.RaiseDataMemberChanging("RashodFavr");
                    this.ValidateProperty("RashodFavr", value);
                    this._rashodFavr = value;
                    this.RaiseDataMemberChanged("RashodFavr");
                    this.OnRashodFavrChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "RUSAData".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Web.Models")]
    public sealed partial class RUSAData : ComplexObject
    {
        
        private List<RUSAResult> _diffResult;
        
        private List<RUSAResult> _eqResult;
        
        private List<FullResultRUSARecord> _fullResultList;
        
        private List<GAParams> _gaAvail;
        
        private Guid _id;
        
        private double _napor;
        
        private double _power;
        
        private List<RUSAResult> _result;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnDiffResultChanging(List<RUSAResult> value);
        partial void OnDiffResultChanged();
        partial void OnEqResultChanging(List<RUSAResult> value);
        partial void OnEqResultChanged();
        partial void OnFullResultListChanging(List<FullResultRUSARecord> value);
        partial void OnFullResultListChanged();
        partial void OnGaAvailChanging(List<GAParams> value);
        partial void OnGaAvailChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNaporChanging(double value);
        partial void OnNaporChanged();
        partial void OnPowerChanging(double value);
        partial void OnPowerChanged();
        partial void OnResultChanging(List<RUSAResult> value);
        partial void OnResultChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RUSAData"/>.
        /// </summary>
        public RUSAData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "DiffResult".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<RUSAResult> DiffResult
        {
            get
            {
                return this._diffResult;
            }
            set
            {
                if ((this._diffResult != value))
                {
                    this.OnDiffResultChanging(value);
                    this.RaiseDataMemberChanging("DiffResult");
                    this.ValidateProperty("DiffResult", value);
                    this._diffResult = value;
                    this.RaiseDataMemberChanged("DiffResult");
                    this.OnDiffResultChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "EqResult".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<RUSAResult> EqResult
        {
            get
            {
                return this._eqResult;
            }
            set
            {
                if ((this._eqResult != value))
                {
                    this.OnEqResultChanging(value);
                    this.RaiseDataMemberChanging("EqResult");
                    this.ValidateProperty("EqResult", value);
                    this._eqResult = value;
                    this.RaiseDataMemberChanged("EqResult");
                    this.OnEqResultChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "FullResultList".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<FullResultRUSARecord> FullResultList
        {
            get
            {
                return this._fullResultList;
            }
            set
            {
                if ((this._fullResultList != value))
                {
                    this.OnFullResultListChanging(value);
                    this.RaiseDataMemberChanging("FullResultList");
                    this.ValidateProperty("FullResultList", value);
                    this._fullResultList = value;
                    this.RaiseDataMemberChanged("FullResultList");
                    this.OnFullResultListChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GaAvail".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<GAParams> GaAvail
        {
            get
            {
                return this._gaAvail;
            }
            set
            {
                if ((this._gaAvail != value))
                {
                    this.OnGaAvailChanging(value);
                    this.RaiseDataMemberChanging("GaAvail");
                    this.ValidateProperty("GaAvail", value);
                    this._gaAvail = value;
                    this.RaiseDataMemberChanged("GaAvail");
                    this.OnGaAvailChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DataMember()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Napor".
        /// </summary>
        [DataMember()]
        public double Napor
        {
            get
            {
                return this._napor;
            }
            set
            {
                if ((this._napor != value))
                {
                    this.OnNaporChanging(value);
                    this.RaiseDataMemberChanging("Napor");
                    this.ValidateProperty("Napor", value);
                    this._napor = value;
                    this.RaiseDataMemberChanged("Napor");
                    this.OnNaporChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Power".
        /// </summary>
        [DataMember()]
        public double Power
        {
            get
            {
                return this._power;
            }
            set
            {
                if ((this._power != value))
                {
                    this.OnPowerChanging(value);
                    this.RaiseDataMemberChanging("Power");
                    this.ValidateProperty("Power", value);
                    this._power = value;
                    this.RaiseDataMemberChanged("Power");
                    this.OnPowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Result".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<RUSAResult> Result
        {
            get
            {
                return this._result;
            }
            set
            {
                if ((this._result != value))
                {
                    this.OnResultChanging(value);
                    this.RaiseDataMemberChanging("Result");
                    this.ValidateProperty("Result", value);
                    this._result = value;
                    this.RaiseDataMemberChanged("Result");
                    this.OnResultChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс "RUSAResult".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Web.Models")]
    public sealed partial class RUSAResult : ComplexObject
    {
        
        private int _count;
        
        private double _kpd;
        
        private double _pga1;
        
        private double _pga10;
        
        private double _pga2;
        
        private double _pga3;
        
        private double _pga4;
        
        private double _pga5;
        
        private double _pga6;
        
        private double _pga7;
        
        private double _pga8;
        
        private double _pga9;
        
        private double _rashod;
        
        private Dictionary<int, double> _sostav;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnCountChanging(int value);
        partial void OnCountChanged();
        partial void OnKPDChanging(double value);
        partial void OnKPDChanged();
        partial void OnPGA1Changing(double value);
        partial void OnPGA1Changed();
        partial void OnPGA10Changing(double value);
        partial void OnPGA10Changed();
        partial void OnPGA2Changing(double value);
        partial void OnPGA2Changed();
        partial void OnPGA3Changing(double value);
        partial void OnPGA3Changed();
        partial void OnPGA4Changing(double value);
        partial void OnPGA4Changed();
        partial void OnPGA5Changing(double value);
        partial void OnPGA5Changed();
        partial void OnPGA6Changing(double value);
        partial void OnPGA6Changed();
        partial void OnPGA7Changing(double value);
        partial void OnPGA7Changed();
        partial void OnPGA8Changing(double value);
        partial void OnPGA8Changed();
        partial void OnPGA9Changing(double value);
        partial void OnPGA9Changed();
        partial void OnRashodChanging(double value);
        partial void OnRashodChanged();
        partial void OnSostavChanging(Dictionary<int, double> value);
        partial void OnSostavChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RUSAResult"/>.
        /// </summary>
        public RUSAResult()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Count".
        /// </summary>
        [DataMember()]
        public int Count
        {
            get
            {
                return this._count;
            }
            set
            {
                if ((this._count != value))
                {
                    this.OnCountChanging(value);
                    this.RaiseDataMemberChanging("Count");
                    this.ValidateProperty("Count", value);
                    this._count = value;
                    this.RaiseDataMemberChanged("Count");
                    this.OnCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "KPD".
        /// </summary>
        [DataMember()]
        public double KPD
        {
            get
            {
                return this._kpd;
            }
            set
            {
                if ((this._kpd != value))
                {
                    this.OnKPDChanging(value);
                    this.RaiseDataMemberChanging("KPD");
                    this.ValidateProperty("KPD", value);
                    this._kpd = value;
                    this.RaiseDataMemberChanged("KPD");
                    this.OnKPDChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PGA1".
        /// </summary>
        [DataMember()]
        public double PGA1
        {
            get
            {
                return this._pga1;
            }
            set
            {
                if ((this._pga1 != value))
                {
                    this.OnPGA1Changing(value);
                    this.RaiseDataMemberChanging("PGA1");
                    this.ValidateProperty("PGA1", value);
                    this._pga1 = value;
                    this.RaiseDataMemberChanged("PGA1");
                    this.OnPGA1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PGA10".
        /// </summary>
        [DataMember()]
        public double PGA10
        {
            get
            {
                return this._pga10;
            }
            set
            {
                if ((this._pga10 != value))
                {
                    this.OnPGA10Changing(value);
                    this.RaiseDataMemberChanging("PGA10");
                    this.ValidateProperty("PGA10", value);
                    this._pga10 = value;
                    this.RaiseDataMemberChanged("PGA10");
                    this.OnPGA10Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PGA2".
        /// </summary>
        [DataMember()]
        public double PGA2
        {
            get
            {
                return this._pga2;
            }
            set
            {
                if ((this._pga2 != value))
                {
                    this.OnPGA2Changing(value);
                    this.RaiseDataMemberChanging("PGA2");
                    this.ValidateProperty("PGA2", value);
                    this._pga2 = value;
                    this.RaiseDataMemberChanged("PGA2");
                    this.OnPGA2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PGA3".
        /// </summary>
        [DataMember()]
        public double PGA3
        {
            get
            {
                return this._pga3;
            }
            set
            {
                if ((this._pga3 != value))
                {
                    this.OnPGA3Changing(value);
                    this.RaiseDataMemberChanging("PGA3");
                    this.ValidateProperty("PGA3", value);
                    this._pga3 = value;
                    this.RaiseDataMemberChanged("PGA3");
                    this.OnPGA3Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PGA4".
        /// </summary>
        [DataMember()]
        public double PGA4
        {
            get
            {
                return this._pga4;
            }
            set
            {
                if ((this._pga4 != value))
                {
                    this.OnPGA4Changing(value);
                    this.RaiseDataMemberChanging("PGA4");
                    this.ValidateProperty("PGA4", value);
                    this._pga4 = value;
                    this.RaiseDataMemberChanged("PGA4");
                    this.OnPGA4Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PGA5".
        /// </summary>
        [DataMember()]
        public double PGA5
        {
            get
            {
                return this._pga5;
            }
            set
            {
                if ((this._pga5 != value))
                {
                    this.OnPGA5Changing(value);
                    this.RaiseDataMemberChanging("PGA5");
                    this.ValidateProperty("PGA5", value);
                    this._pga5 = value;
                    this.RaiseDataMemberChanged("PGA5");
                    this.OnPGA5Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PGA6".
        /// </summary>
        [DataMember()]
        public double PGA6
        {
            get
            {
                return this._pga6;
            }
            set
            {
                if ((this._pga6 != value))
                {
                    this.OnPGA6Changing(value);
                    this.RaiseDataMemberChanging("PGA6");
                    this.ValidateProperty("PGA6", value);
                    this._pga6 = value;
                    this.RaiseDataMemberChanged("PGA6");
                    this.OnPGA6Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PGA7".
        /// </summary>
        [DataMember()]
        public double PGA7
        {
            get
            {
                return this._pga7;
            }
            set
            {
                if ((this._pga7 != value))
                {
                    this.OnPGA7Changing(value);
                    this.RaiseDataMemberChanging("PGA7");
                    this.ValidateProperty("PGA7", value);
                    this._pga7 = value;
                    this.RaiseDataMemberChanged("PGA7");
                    this.OnPGA7Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PGA8".
        /// </summary>
        [DataMember()]
        public double PGA8
        {
            get
            {
                return this._pga8;
            }
            set
            {
                if ((this._pga8 != value))
                {
                    this.OnPGA8Changing(value);
                    this.RaiseDataMemberChanging("PGA8");
                    this.ValidateProperty("PGA8", value);
                    this._pga8 = value;
                    this.RaiseDataMemberChanged("PGA8");
                    this.OnPGA8Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PGA9".
        /// </summary>
        [DataMember()]
        public double PGA9
        {
            get
            {
                return this._pga9;
            }
            set
            {
                if ((this._pga9 != value))
                {
                    this.OnPGA9Changing(value);
                    this.RaiseDataMemberChanging("PGA9");
                    this.ValidateProperty("PGA9", value);
                    this._pga9 = value;
                    this.RaiseDataMemberChanged("PGA9");
                    this.OnPGA9Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Rashod".
        /// </summary>
        [DataMember()]
        public double Rashod
        {
            get
            {
                return this._rashod;
            }
            set
            {
                if ((this._rashod != value))
                {
                    this.OnRashodChanging(value);
                    this.RaiseDataMemberChanging("Rashod");
                    this.ValidateProperty("Rashod", value);
                    this._rashod = value;
                    this.RaiseDataMemberChanged("Rashod");
                    this.OnRashodChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Sostav".
        /// </summary>
        [DataMember()]
        public Dictionary<int, double> Sostav
        {
            get
            {
                return this._sostav;
            }
            set
            {
                if ((this._sostav != value))
                {
                    this.OnSostavChanging(value);
                    this.RaiseDataMemberChanging("Sostav");
                    this.ValidateProperty("Sostav", value);
                    this._sostav = value;
                    this.RaiseDataMemberChanged("Sostav");
                    this.OnSostavChanged();
                }
            }
        }
    }
}
namespace VotGES.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using VotGES.Chart;
    using VotGES.PBR;
    using VotGES.Piramida.Report;
    using VotGES.PrognozNB;
    using VotGES.Rashod;
    using VotGES.Web.Models;
    
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "AuthenticationDomainService" DomainService.
    /// </summary>
    public sealed partial class AuthenticationDomainContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="AuthenticationDomainContext"/>.
        /// </summary>
        public AuthenticationDomainContext() : 
                this(new WebDomainClient<IAuthenticationDomainServiceContract>(new Uri("VotGES-Web-Services-AuthenticationDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="AuthenticationDomainContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы AuthenticationDomainService.</param>
        public AuthenticationDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="AuthenticationDomainContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public AuthenticationDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="User"/>, загруженных в данный экземпляр <see cref="AuthenticationDomainContext"/>.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "GetUser".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "Login".
        /// </summary>
        /// <param name="userName">Значение параметра "userName" для запроса.</param>
        /// <param name="password">Значение параметра "password" для запроса.</param>
        /// <param name="isPersistent">Значение параметра "isPersistent" для запроса.</param>
        /// <param name="customData">Значение параметра "customData" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "Logout".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "AuthenticationDomainService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationDomainServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetUser".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/GetUser", ReplyAction="http://tempuri.org/AuthenticationDomainService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetUser".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetUser".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetUser".</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "Login".
            /// </summary>
            /// <param name="userName">Значение параметра "userName" для данного действия.</param>
            /// <param name="password">Значение параметра "password" для данного действия.</param>
            /// <param name="isPersistent">Значение параметра "isPersistent" для данного действия.</param>
            /// <param name="customData">Значение параметра "customData" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/Login", ReplyAction="http://tempuri.org/AuthenticationDomainService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginLogin".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginLogin".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "Login".</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "Logout".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/Logout", ReplyAction="http://tempuri.org/AuthenticationDomainService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginLogout".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginLogout".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "Logout".</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationDomainContextEntityContainer : EntityContainer
        {
            
            public AuthenticationDomainContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// Класс "FullGraphVyrab".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Web.Services")]
    public sealed partial class FullGraphVyrab : ComplexObject
    {
        
        private GraphVyrabAnswer _gtp;
        
        private double _napor;
        
        private GraphVyrabRGEAnswer _rge;
        
        private Dictionary<int, string> _timeStopGA;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnGTPChanging(GraphVyrabAnswer value);
        partial void OnGTPChanged();
        partial void OnNaporChanging(double value);
        partial void OnNaporChanged();
        partial void OnRGEChanging(GraphVyrabRGEAnswer value);
        partial void OnRGEChanged();
        partial void OnTimeStopGAChanging(Dictionary<int, string> value);
        partial void OnTimeStopGAChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="FullGraphVyrab"/>.
        /// </summary>
        public FullGraphVyrab()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GTP".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public GraphVyrabAnswer GTP
        {
            get
            {
                return this._gtp;
            }
            set
            {
                if ((this._gtp != value))
                {
                    this.OnGTPChanging(value);
                    this.RaiseDataMemberChanging("GTP");
                    this.ValidateProperty("GTP", value);
                    this._gtp = value;
                    this.RaiseDataMemberChanged("GTP");
                    this.OnGTPChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Napor".
        /// </summary>
        [DataMember()]
        public double Napor
        {
            get
            {
                return this._napor;
            }
            set
            {
                if ((this._napor != value))
                {
                    this.OnNaporChanging(value);
                    this.RaiseDataMemberChanging("Napor");
                    this.ValidateProperty("Napor", value);
                    this._napor = value;
                    this.RaiseDataMemberChanged("Napor");
                    this.OnNaporChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RGE".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public GraphVyrabRGEAnswer RGE
        {
            get
            {
                return this._rge;
            }
            set
            {
                if ((this._rge != value))
                {
                    this.OnRGEChanging(value);
                    this.RaiseDataMemberChanging("RGE");
                    this.ValidateProperty("RGE", value);
                    this._rge = value;
                    this.RaiseDataMemberChanged("RGE");
                    this.OnRGEChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeStopGA".
        /// </summary>
        [DataMember()]
        public Dictionary<int, string> TimeStopGA
        {
            get
            {
                return this._timeStopGA;
            }
            set
            {
                if ((this._timeStopGA != value))
                {
                    this.OnTimeStopGAChanging(value);
                    this.RaiseDataMemberChanging("TimeStopGA");
                    this.ValidateProperty("TimeStopGA", value);
                    this._timeStopGA = value;
                    this.RaiseDataMemberChanged("TimeStopGA");
                    this.OnTimeStopGAChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "GraphVyrabDomainService" DomainService.
    /// </summary>
    public sealed partial class GraphVyrabDomainContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="GraphVyrabDomainContext"/>.
        /// </summary>
        public GraphVyrabDomainContext() : 
                this(new WebDomainClient<IGraphVyrabDomainServiceContract>(new Uri("VotGES-Web-Services-GraphVyrabDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="GraphVyrabDomainContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы GraphVyrabDomainService.</param>
        public GraphVyrabDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IGraphVyrabDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="GraphVyrabDomainContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public GraphVyrabDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getFullGraphVyrab" службы DomainService.
        /// </summary>
        /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<FullGraphVyrab> getFullGraphVyrab(bool steppedPBR, Action<InvokeOperation<FullGraphVyrab>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("steppedPBR", steppedPBR);
            this.ValidateMethod("getFullGraphVyrab", parameters);
            return ((InvokeOperation<FullGraphVyrab>)(this.InvokeOperation("getFullGraphVyrab", typeof(FullGraphVyrab), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getFullGraphVyrab" службы DomainService.
        /// </summary>
        /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<FullGraphVyrab> getFullGraphVyrab(bool steppedPBR)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("steppedPBR", steppedPBR);
            this.ValidateMethod("getFullGraphVyrab", parameters);
            return ((InvokeOperation<FullGraphVyrab>)(this.InvokeOperation("getFullGraphVyrab", typeof(FullGraphVyrab), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrab" службы DomainService.
        /// </summary>
        /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<GraphVyrabAnswer> getGraphVyrab(bool steppedPBR, Action<InvokeOperation<GraphVyrabAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("steppedPBR", steppedPBR);
            this.ValidateMethod("getGraphVyrab", parameters);
            return ((InvokeOperation<GraphVyrabAnswer>)(this.InvokeOperation("getGraphVyrab", typeof(GraphVyrabAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrab" службы DomainService.
        /// </summary>
        /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<GraphVyrabAnswer> getGraphVyrab(bool steppedPBR)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("steppedPBR", steppedPBR);
            this.ValidateMethod("getGraphVyrab", parameters);
            return ((InvokeOperation<GraphVyrabAnswer>)(this.InvokeOperation("getGraphVyrab", typeof(GraphVyrabAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrabHH" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<CheckGraphVyrabAnswer> getGraphVyrabHH(DateTime date, Action<InvokeOperation<CheckGraphVyrabAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            this.ValidateMethod("getGraphVyrabHH", parameters);
            return ((InvokeOperation<CheckGraphVyrabAnswer>)(this.InvokeOperation("getGraphVyrabHH", typeof(CheckGraphVyrabAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrabHH" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<CheckGraphVyrabAnswer> getGraphVyrabHH(DateTime date)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            this.ValidateMethod("getGraphVyrabHH", parameters);
            return ((InvokeOperation<CheckGraphVyrabAnswer>)(this.InvokeOperation("getGraphVyrabHH", typeof(CheckGraphVyrabAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrabMin" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<GraphVyrabAnswer> getGraphVyrabMin(DateTime date, bool steppedPBR, Action<InvokeOperation<GraphVyrabAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            parameters.Add("steppedPBR", steppedPBR);
            this.ValidateMethod("getGraphVyrabMin", parameters);
            return ((InvokeOperation<GraphVyrabAnswer>)(this.InvokeOperation("getGraphVyrabMin", typeof(GraphVyrabAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrabMin" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<GraphVyrabAnswer> getGraphVyrabMin(DateTime date, bool steppedPBR)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            parameters.Add("steppedPBR", steppedPBR);
            this.ValidateMethod("getGraphVyrabMin", parameters);
            return ((InvokeOperation<GraphVyrabAnswer>)(this.InvokeOperation("getGraphVyrabMin", typeof(GraphVyrabAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrabRGE" службы DomainService.
        /// </summary>
        /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<GraphVyrabRGEAnswer> getGraphVyrabRGE(bool steppedPBR, Action<InvokeOperation<GraphVyrabRGEAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("steppedPBR", steppedPBR);
            this.ValidateMethod("getGraphVyrabRGE", parameters);
            return ((InvokeOperation<GraphVyrabRGEAnswer>)(this.InvokeOperation("getGraphVyrabRGE", typeof(GraphVyrabRGEAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrabRGE" службы DomainService.
        /// </summary>
        /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<GraphVyrabRGEAnswer> getGraphVyrabRGE(bool steppedPBR)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("steppedPBR", steppedPBR);
            this.ValidateMethod("getGraphVyrabRGE", parameters);
            return ((InvokeOperation<GraphVyrabRGEAnswer>)(this.InvokeOperation("getGraphVyrabRGE", typeof(GraphVyrabRGEAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrabRGEHH" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<CheckGraphVyrabRGEAnswer> getGraphVyrabRGEHH(DateTime date, Action<InvokeOperation<CheckGraphVyrabRGEAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            this.ValidateMethod("getGraphVyrabRGEHH", parameters);
            return ((InvokeOperation<CheckGraphVyrabRGEAnswer>)(this.InvokeOperation("getGraphVyrabRGEHH", typeof(CheckGraphVyrabRGEAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrabRGEHH" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<CheckGraphVyrabRGEAnswer> getGraphVyrabRGEHH(DateTime date)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            this.ValidateMethod("getGraphVyrabRGEHH", parameters);
            return ((InvokeOperation<CheckGraphVyrabRGEAnswer>)(this.InvokeOperation("getGraphVyrabRGEHH", typeof(CheckGraphVyrabRGEAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrabRGEMin" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<GraphVyrabRGEAnswer> getGraphVyrabRGEMin(DateTime date, bool steppedPBR, Action<InvokeOperation<GraphVyrabRGEAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            parameters.Add("steppedPBR", steppedPBR);
            this.ValidateMethod("getGraphVyrabRGEMin", parameters);
            return ((InvokeOperation<GraphVyrabRGEAnswer>)(this.InvokeOperation("getGraphVyrabRGEMin", typeof(GraphVyrabRGEAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getGraphVyrabRGEMin" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<GraphVyrabRGEAnswer> getGraphVyrabRGEMin(DateTime date, bool steppedPBR)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            parameters.Add("steppedPBR", steppedPBR);
            this.ValidateMethod("getGraphVyrabRGEMin", parameters);
            return ((InvokeOperation<GraphVyrabRGEAnswer>)(this.InvokeOperation("getGraphVyrabRGEMin", typeof(GraphVyrabRGEAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new GraphVyrabDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "GraphVyrabDomainService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IGraphVyrabDomainServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "getFullGraphVyrab".
            /// </summary>
            /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GraphVyrabDomainService/getFullGraphVyrabDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GraphVyrabDomainService/getFullGraphVyrab", ReplyAction="http://tempuri.org/GraphVyrabDomainService/getFullGraphVyrabResponse")]
            IAsyncResult BegingetFullGraphVyrab(bool steppedPBR, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetFullGraphVyrab".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetFullGraphVyrab".</param>
            /// <returns>Объект "FullGraphVyrab", возвращенный из операции "getFullGraphVyrab".</returns>
            FullGraphVyrab EndgetFullGraphVyrab(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "getGraphVyrab".
            /// </summary>
            /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrab", ReplyAction="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabResponse")]
            IAsyncResult BegingetGraphVyrab(bool steppedPBR, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetGraphVyrab".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetGraphVyrab".</param>
            /// <returns>Объект "GraphVyrabAnswer", возвращенный из операции "getGraphVyrab".</returns>
            GraphVyrabAnswer EndgetGraphVyrab(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "getGraphVyrabHH".
            /// </summary>
            /// <param name="date">Значение параметра "date" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabHHDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabHH", ReplyAction="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabHHResponse")]
            IAsyncResult BegingetGraphVyrabHH(DateTime date, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetGraphVyrabHH".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetGraphVyrabHH".</param>
            /// <returns>Объект "CheckGraphVyrabAnswer", возвращенный из операции "getGraphVyrabHH".</returns>
            CheckGraphVyrabAnswer EndgetGraphVyrabHH(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "getGraphVyrabMin".
            /// </summary>
            /// <param name="date">Значение параметра "date" для данного действия.</param>
            /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabMinDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabMin", ReplyAction="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabMinResponse")]
            IAsyncResult BegingetGraphVyrabMin(DateTime date, bool steppedPBR, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetGraphVyrabMin".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetGraphVyrabMin".</param>
            /// <returns>Объект "GraphVyrabAnswer", возвращенный из операции "getGraphVyrabMin".</returns>
            GraphVyrabAnswer EndgetGraphVyrabMin(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "getGraphVyrabRGE".
            /// </summary>
            /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabRGEDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabRGE", ReplyAction="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabRGEResponse")]
            IAsyncResult BegingetGraphVyrabRGE(bool steppedPBR, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetGraphVyrabRGE".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetGraphVyrabRGE".</param>
            /// <returns>Объект "GraphVyrabRGEAnswer", возвращенный из операции "getGraphVyrabRGE".</returns>
            GraphVyrabRGEAnswer EndgetGraphVyrabRGE(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "getGraphVyrabRGEHH".
            /// </summary>
            /// <param name="date">Значение параметра "date" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabRGEHHDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabRGEHH", ReplyAction="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabRGEHHResponse")]
            IAsyncResult BegingetGraphVyrabRGEHH(DateTime date, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetGraphVyrabRGEHH".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetGraphVyrabRGEHH".</param>
            /// <returns>Объект "CheckGraphVyrabRGEAnswer", возвращенный из операции "getGraphVyrabRGEHH".</returns>
            CheckGraphVyrabRGEAnswer EndgetGraphVyrabRGEHH(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "getGraphVyrabRGEMin".
            /// </summary>
            /// <param name="date">Значение параметра "date" для данного действия.</param>
            /// <param name="steppedPBR">Значение параметра "steppedPBR" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabRGEMinDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabRGEMin", ReplyAction="http://tempuri.org/GraphVyrabDomainService/getGraphVyrabRGEMinResponse")]
            IAsyncResult BegingetGraphVyrabRGEMin(DateTime date, bool steppedPBR, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetGraphVyrabRGEMin".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetGraphVyrabRGEMin".</param>
            /// <returns>Объект "GraphVyrabRGEAnswer", возвращенный из операции "getGraphVyrabRGEMin".</returns>
            GraphVyrabRGEAnswer EndgetGraphVyrabRGEMin(IAsyncResult result);
        }
        
        internal sealed class GraphVyrabDomainContextEntityContainer : EntityContainer
        {
            
            public GraphVyrabDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "LoggerService" DomainService.
    /// </summary>
    public sealed partial class LoggerContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="LoggerContext"/>.
        /// </summary>
        public LoggerContext() : 
                this(new WebDomainClient<ILoggerServiceContract>(new Uri("VotGES-Web-Services-LoggerService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="LoggerContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы LoggerService.</param>
        public LoggerContext(Uri serviceUri) : 
                this(new WebDomainClient<ILoggerServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="LoggerContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public LoggerContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "debug" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation debug(string message, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("debug", parameters);
            return this.InvokeOperation("debug", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "debug" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation debug(string message)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("debug", parameters);
            return this.InvokeOperation("debug", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "error" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation error(string message, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("error", parameters);
            return this.InvokeOperation("error", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "error" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation error(string message)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("error", parameters);
            return this.InvokeOperation("error", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "info" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation info(string message, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("info", parameters);
            return this.InvokeOperation("info", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "info" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation info(string message)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("info", parameters);
            return this.InvokeOperation("info", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LoggerContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "LoggerService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ILoggerServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "debug".
            /// </summary>
            /// <param name="message">Значение параметра "message" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoggerService/debugDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoggerService/debug", ReplyAction="http://tempuri.org/LoggerService/debugResponse")]
            IAsyncResult Begindebug(string message, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "Begindebug".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "Begindebug".</param>
            void Enddebug(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "error".
            /// </summary>
            /// <param name="message">Значение параметра "message" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoggerService/errorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoggerService/error", ReplyAction="http://tempuri.org/LoggerService/errorResponse")]
            IAsyncResult Beginerror(string message, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "Beginerror".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "Beginerror".</param>
            void Enderror(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "info".
            /// </summary>
            /// <param name="message">Значение параметра "message" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoggerService/infoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoggerService/info", ReplyAction="http://tempuri.org/LoggerService/infoResponse")]
            IAsyncResult Begininfo(string message, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "Begininfo".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "Begininfo".</param>
            void Endinfo(IAsyncResult result);
        }
        
        internal sealed class LoggerContextEntityContainer : EntityContainer
        {
            
            public LoggerContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "OgranGAService" DomainService.
    /// </summary>
    public sealed partial class OgranGAContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="OgranGAContext"/>.
        /// </summary>
        public OgranGAContext() : 
                this(new WebDomainClient<IOgranGAServiceContract>(new Uri("VotGES-Web-Services-OgranGAService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="OgranGAContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы OgranGAService.</param>
        public OgranGAContext(Uri serviceUri) : 
                this(new WebDomainClient<IOgranGAServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="OgranGAContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public OgranGAContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getOgranGAAnswer" службы DomainService.
        /// </summary>
        /// <param name="ga">Значение параметра "ga" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<OgranGAAnswer> getOgranGAAnswer(int ga, Action<InvokeOperation<OgranGAAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ga", ga);
            this.ValidateMethod("getOgranGAAnswer", parameters);
            return ((InvokeOperation<OgranGAAnswer>)(this.InvokeOperation("getOgranGAAnswer", typeof(OgranGAAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getOgranGAAnswer" службы DomainService.
        /// </summary>
        /// <param name="ga">Значение параметра "ga" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<OgranGAAnswer> getOgranGAAnswer(int ga)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ga", ga);
            this.ValidateMethod("getOgranGAAnswer", parameters);
            return ((InvokeOperation<OgranGAAnswer>)(this.InvokeOperation("getOgranGAAnswer", typeof(OgranGAAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getOgranGAData" службы DomainService.
        /// </summary>
        /// <param name="ga">Значение параметра "ga" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<OgranGAAnswer> getOgranGAData(int ga, Action<InvokeOperation<OgranGAAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ga", ga);
            this.ValidateMethod("getOgranGAData", parameters);
            return ((InvokeOperation<OgranGAAnswer>)(this.InvokeOperation("getOgranGAData", typeof(OgranGAAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getOgranGAData" службы DomainService.
        /// </summary>
        /// <param name="ga">Значение параметра "ga" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<OgranGAAnswer> getOgranGAData(int ga)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ga", ga);
            this.ValidateMethod("getOgranGAData", parameters);
            return ((InvokeOperation<OgranGAAnswer>)(this.InvokeOperation("getOgranGAData", typeof(OgranGAAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getPuskStopFull" службы DomainService.
        /// </summary>
        /// <param name="dateStart">Значение параметра "dateStart" для данного действия.</param>
        /// <param name="dateEnd">Значение параметра "dateEnd" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<ChartAnswer> getPuskStopFull(DateTime dateStart, DateTime dateEnd, Action<InvokeOperation<ChartAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dateStart", dateStart);
            parameters.Add("dateEnd", dateEnd);
            this.ValidateMethod("getPuskStopFull", parameters);
            return ((InvokeOperation<ChartAnswer>)(this.InvokeOperation("getPuskStopFull", typeof(ChartAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getPuskStopFull" службы DomainService.
        /// </summary>
        /// <param name="dateStart">Значение параметра "dateStart" для данного действия.</param>
        /// <param name="dateEnd">Значение параметра "dateEnd" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<ChartAnswer> getPuskStopFull(DateTime dateStart, DateTime dateEnd)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dateStart", dateStart);
            parameters.Add("dateEnd", dateEnd);
            this.ValidateMethod("getPuskStopFull", parameters);
            return ((InvokeOperation<ChartAnswer>)(this.InvokeOperation("getPuskStopFull", typeof(ChartAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new OgranGAContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "OgranGAService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IOgranGAServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "getOgranGAAnswer".
            /// </summary>
            /// <param name="ga">Значение параметра "ga" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OgranGAService/getOgranGAAnswerDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OgranGAService/getOgranGAAnswer", ReplyAction="http://tempuri.org/OgranGAService/getOgranGAAnswerResponse")]
            IAsyncResult BegingetOgranGAAnswer(int ga, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetOgranGAAnswer".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetOgranGAAnswer".</param>
            /// <returns>Объект "OgranGAAnswer", возвращенный из операции "getOgranGAAnswer".</returns>
            OgranGAAnswer EndgetOgranGAAnswer(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "getOgranGAData".
            /// </summary>
            /// <param name="ga">Значение параметра "ga" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OgranGAService/getOgranGADataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OgranGAService/getOgranGAData", ReplyAction="http://tempuri.org/OgranGAService/getOgranGADataResponse")]
            IAsyncResult BegingetOgranGAData(int ga, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetOgranGAData".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetOgranGAData".</param>
            /// <returns>Объект "OgranGAAnswer", возвращенный из операции "getOgranGAData".</returns>
            OgranGAAnswer EndgetOgranGAData(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "getPuskStopFull".
            /// </summary>
            /// <param name="dateStart">Значение параметра "dateStart" для данного действия.</param>
            /// <param name="dateEnd">Значение параметра "dateEnd" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OgranGAService/getPuskStopFullDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OgranGAService/getPuskStopFull", ReplyAction="http://tempuri.org/OgranGAService/getPuskStopFullResponse")]
            IAsyncResult BegingetPuskStopFull(DateTime dateStart, DateTime dateEnd, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetPuskStopFull".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetPuskStopFull".</param>
            /// <returns>Объект "ChartAnswer", возвращенный из операции "getPuskStopFull".</returns>
            ChartAnswer EndgetPuskStopFull(IAsyncResult result);
        }
        
        internal sealed class OgranGAContextEntityContainer : EntityContainer
        {
            
            public OgranGAContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "PrognozNBService" DomainService.
    /// </summary>
    public sealed partial class PrognozNBContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="PrognozNBContext"/>.
        /// </summary>
        public PrognozNBContext() : 
                this(new WebDomainClient<IPrognozNBServiceContract>(new Uri("VotGES-Web-Services-PrognozNBService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="PrognozNBContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы PrognozNBService.</param>
        public PrognozNBContext(Uri serviceUri) : 
                this(new WebDomainClient<IPrognozNBServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="PrognozNBContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public PrognozNBContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "checkPrognozNB" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <param name="countDays">Значение параметра "countDays" для данного действия.</param>
        /// <param name="isQFakt">Значение параметра "isQFakt" для данного действия.</param>
        /// <param name="correctByPrev">Значение параметра "correctByPrev" для данного действия.</param>
        /// <param name="hourStart">Значение параметра "hourStart" для данного действия.</param>
        /// <param name="minStart">Значение параметра "minStart" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<ChartAnswer> checkPrognozNB(DateTime date, int countDays, bool isQFakt, bool correctByPrev, int hourStart, int minStart, Action<InvokeOperation<ChartAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            parameters.Add("countDays", countDays);
            parameters.Add("isQFakt", isQFakt);
            parameters.Add("correctByPrev", correctByPrev);
            parameters.Add("hourStart", hourStart);
            parameters.Add("minStart", minStart);
            this.ValidateMethod("checkPrognozNB", parameters);
            return ((InvokeOperation<ChartAnswer>)(this.InvokeOperation("checkPrognozNB", typeof(ChartAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "checkPrognozNB" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <param name="countDays">Значение параметра "countDays" для данного действия.</param>
        /// <param name="isQFakt">Значение параметра "isQFakt" для данного действия.</param>
        /// <param name="correctByPrev">Значение параметра "correctByPrev" для данного действия.</param>
        /// <param name="hourStart">Значение параметра "hourStart" для данного действия.</param>
        /// <param name="minStart">Значение параметра "minStart" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<ChartAnswer> checkPrognozNB(DateTime date, int countDays, bool isQFakt, bool correctByPrev, int hourStart, int minStart)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            parameters.Add("countDays", countDays);
            parameters.Add("isQFakt", isQFakt);
            parameters.Add("correctByPrev", correctByPrev);
            parameters.Add("hourStart", hourStart);
            parameters.Add("minStart", minStart);
            this.ValidateMethod("checkPrognozNB", parameters);
            return ((InvokeOperation<ChartAnswer>)(this.InvokeOperation("checkPrognozNB", typeof(ChartAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getPrognoz" службы DomainService.
        /// </summary>
        /// <param name="countDays">Значение параметра "countDays" для данного действия.</param>
        /// <param name="correctByPrev">Значение параметра "correctByPrev" для данного действия.</param>
        /// <param name="pbr">Значение параметра "pbr" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<PrognozNBByPBRAnswer> getPrognoz(int countDays, bool correctByPrev, Dictionary<DateTime, double> pbr, Action<InvokeOperation<PrognozNBByPBRAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("countDays", countDays);
            parameters.Add("correctByPrev", correctByPrev);
            parameters.Add("pbr", pbr);
            this.ValidateMethod("getPrognoz", parameters);
            return ((InvokeOperation<PrognozNBByPBRAnswer>)(this.InvokeOperation("getPrognoz", typeof(PrognozNBByPBRAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getPrognoz" службы DomainService.
        /// </summary>
        /// <param name="countDays">Значение параметра "countDays" для данного действия.</param>
        /// <param name="correctByPrev">Значение параметра "correctByPrev" для данного действия.</param>
        /// <param name="pbr">Значение параметра "pbr" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<PrognozNBByPBRAnswer> getPrognoz(int countDays, bool correctByPrev, Dictionary<DateTime, double> pbr)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("countDays", countDays);
            parameters.Add("correctByPrev", correctByPrev);
            parameters.Add("pbr", pbr);
            this.ValidateMethod("getPrognoz", parameters);
            return ((InvokeOperation<PrognozNBByPBRAnswer>)(this.InvokeOperation("getPrognoz", typeof(PrognozNBByPBRAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PrognozNBContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "PrognozNBService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPrognozNBServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "checkPrognozNB".
            /// </summary>
            /// <param name="date">Значение параметра "date" для данного действия.</param>
            /// <param name="countDays">Значение параметра "countDays" для данного действия.</param>
            /// <param name="isQFakt">Значение параметра "isQFakt" для данного действия.</param>
            /// <param name="correctByPrev">Значение параметра "correctByPrev" для данного действия.</param>
            /// <param name="hourStart">Значение параметра "hourStart" для данного действия.</param>
            /// <param name="minStart">Значение параметра "minStart" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrognozNBService/checkPrognozNBDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrognozNBService/checkPrognozNB", ReplyAction="http://tempuri.org/PrognozNBService/checkPrognozNBResponse")]
            IAsyncResult BegincheckPrognozNB(DateTime date, int countDays, bool isQFakt, bool correctByPrev, int hourStart, int minStart, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegincheckPrognozNB".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegincheckPrognozNB".</param>
            /// <returns>Объект "ChartAnswer", возвращенный из операции "checkPrognozNB".</returns>
            ChartAnswer EndcheckPrognozNB(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "getPrognoz".
            /// </summary>
            /// <param name="countDays">Значение параметра "countDays" для данного действия.</param>
            /// <param name="correctByPrev">Значение параметра "correctByPrev" для данного действия.</param>
            /// <param name="pbr">Значение параметра "pbr" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrognozNBService/getPrognozDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrognozNBService/getPrognoz", ReplyAction="http://tempuri.org/PrognozNBService/getPrognozResponse")]
            IAsyncResult BegingetPrognoz(int countDays, bool correctByPrev, Dictionary<DateTime, double> pbr, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetPrognoz".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetPrognoz".</param>
            /// <returns>Объект "PrognozNBByPBRAnswer", возвращенный из операции "getPrognoz".</returns>
            PrognozNBByPBRAnswer EndgetPrognoz(IAsyncResult result);
        }
        
        internal sealed class PrognozNBContextEntityContainer : EntityContainer
        {
            
            public PrognozNBContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "ReportBaseDomainService" DomainService.
    /// </summary>
    public sealed partial class ReportBaseDomainContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ReportBaseDomainContext"/>.
        /// </summary>
        public ReportBaseDomainContext() : 
                this(new WebDomainClient<IReportBaseDomainServiceContract>(new Uri("VotGES-Web-Services-ReportBaseDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="ReportBaseDomainContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы ReportBaseDomainService.</param>
        public ReportBaseDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IReportBaseDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="ReportBaseDomainContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public ReportBaseDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "GetFullReport" службы DomainService.
        /// </summary>
        /// <param name="selectedData">Значение параметра "selectedData" для данного действия.</param>
        /// <param name="ax1">Значение параметра "ax1" для данного действия.</param>
        /// <param name="ax2">Значение параметра "ax2" для данного действия.</param>
        /// <param name="ax3">Значение параметра "ax3" для данного действия.</param>
        /// <param name="ax4">Значение параметра "ax4" для данного действия.</param>
        /// <param name="ax5">Значение параметра "ax5" для данного действия.</param>
        /// <param name="Title">Значение параметра "Title" для данного действия.</param>
        /// <param name="dateStart">Значение параметра "dateStart" для данного действия.</param>
        /// <param name="dateEnd">Значение параметра "dateEnd" для данного действия.</param>
        /// <param name="ReportType">Значение параметра "ReportType" для данного действия.</param>
        /// <param name="mbType">Значение параметра "mbType" для данного действия.</param>
        /// <param name="isChart">Значение параметра "isChart" для данного действия.</param>
        /// <param name="isTable">Значение параметра "isTable" для данного действия.</param>
        /// <param name="isExcel">Значение параметра "isExcel" для данного действия.</param>
        /// <param name="reportID">Значение параметра "reportID" для данного действия.</param>
        /// <param name="TitleList">Значение параметра "TitleList" для данного действия.</param>
        /// <param name="DateStartList">Значение параметра "DateStartList" для данного действия.</param>
        /// <param name="DateEndList">Значение параметра "DateEndList" для данного действия.</param>
        /// <param name="MBTypeList">Значение параметра "MBTypeList" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<ReportAnswer> GetFullReport(
                    IEnumerable<string> selectedData, 
                    IEnumerable<string> ax1, 
                    IEnumerable<string> ax2, 
                    IEnumerable<string> ax3, 
                    IEnumerable<string> ax4, 
                    IEnumerable<string> ax5, 
                    string Title, 
                    DateTime dateStart, 
                    DateTime dateEnd, 
                    ReportTypeEnum ReportType, 
                    FullReportMembersType mbType, 
                    bool isChart, 
                    bool isTable, 
                    bool isExcel, 
                    Guid reportID, 
                    IEnumerable<string> TitleList, 
                    IEnumerable<DateTime> DateStartList, 
                    IEnumerable<DateTime> DateEndList, 
                    IEnumerable<FullReportMembersType> MBTypeList, 
                    Action<InvokeOperation<ReportAnswer>> callback, 
                    object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("selectedData", selectedData);
            parameters.Add("ax1", ax1);
            parameters.Add("ax2", ax2);
            parameters.Add("ax3", ax3);
            parameters.Add("ax4", ax4);
            parameters.Add("ax5", ax5);
            parameters.Add("Title", Title);
            parameters.Add("dateStart", dateStart);
            parameters.Add("dateEnd", dateEnd);
            parameters.Add("ReportType", ReportType);
            parameters.Add("mbType", mbType);
            parameters.Add("isChart", isChart);
            parameters.Add("isTable", isTable);
            parameters.Add("isExcel", isExcel);
            parameters.Add("reportID", reportID);
            parameters.Add("TitleList", TitleList);
            parameters.Add("DateStartList", DateStartList);
            parameters.Add("DateEndList", DateEndList);
            parameters.Add("MBTypeList", MBTypeList);
            this.ValidateMethod("GetFullReport", parameters);
            return ((InvokeOperation<ReportAnswer>)(this.InvokeOperation("GetFullReport", typeof(ReportAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "GetFullReport" службы DomainService.
        /// </summary>
        /// <param name="selectedData">Значение параметра "selectedData" для данного действия.</param>
        /// <param name="ax1">Значение параметра "ax1" для данного действия.</param>
        /// <param name="ax2">Значение параметра "ax2" для данного действия.</param>
        /// <param name="ax3">Значение параметра "ax3" для данного действия.</param>
        /// <param name="ax4">Значение параметра "ax4" для данного действия.</param>
        /// <param name="ax5">Значение параметра "ax5" для данного действия.</param>
        /// <param name="Title">Значение параметра "Title" для данного действия.</param>
        /// <param name="dateStart">Значение параметра "dateStart" для данного действия.</param>
        /// <param name="dateEnd">Значение параметра "dateEnd" для данного действия.</param>
        /// <param name="ReportType">Значение параметра "ReportType" для данного действия.</param>
        /// <param name="mbType">Значение параметра "mbType" для данного действия.</param>
        /// <param name="isChart">Значение параметра "isChart" для данного действия.</param>
        /// <param name="isTable">Значение параметра "isTable" для данного действия.</param>
        /// <param name="isExcel">Значение параметра "isExcel" для данного действия.</param>
        /// <param name="reportID">Значение параметра "reportID" для данного действия.</param>
        /// <param name="TitleList">Значение параметра "TitleList" для данного действия.</param>
        /// <param name="DateStartList">Значение параметра "DateStartList" для данного действия.</param>
        /// <param name="DateEndList">Значение параметра "DateEndList" для данного действия.</param>
        /// <param name="MBTypeList">Значение параметра "MBTypeList" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<ReportAnswer> GetFullReport(
                    IEnumerable<string> selectedData, 
                    IEnumerable<string> ax1, 
                    IEnumerable<string> ax2, 
                    IEnumerable<string> ax3, 
                    IEnumerable<string> ax4, 
                    IEnumerable<string> ax5, 
                    string Title, 
                    DateTime dateStart, 
                    DateTime dateEnd, 
                    ReportTypeEnum ReportType, 
                    FullReportMembersType mbType, 
                    bool isChart, 
                    bool isTable, 
                    bool isExcel, 
                    Guid reportID, 
                    IEnumerable<string> TitleList, 
                    IEnumerable<DateTime> DateStartList, 
                    IEnumerable<DateTime> DateEndList, 
                    IEnumerable<FullReportMembersType> MBTypeList)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("selectedData", selectedData);
            parameters.Add("ax1", ax1);
            parameters.Add("ax2", ax2);
            parameters.Add("ax3", ax3);
            parameters.Add("ax4", ax4);
            parameters.Add("ax5", ax5);
            parameters.Add("Title", Title);
            parameters.Add("dateStart", dateStart);
            parameters.Add("dateEnd", dateEnd);
            parameters.Add("ReportType", ReportType);
            parameters.Add("mbType", mbType);
            parameters.Add("isChart", isChart);
            parameters.Add("isTable", isTable);
            parameters.Add("isExcel", isExcel);
            parameters.Add("reportID", reportID);
            parameters.Add("TitleList", TitleList);
            parameters.Add("DateStartList", DateStartList);
            parameters.Add("DateEndList", DateEndList);
            parameters.Add("MBTypeList", MBTypeList);
            this.ValidateMethod("GetFullReport", parameters);
            return ((InvokeOperation<ReportAnswer>)(this.InvokeOperation("GetFullReport", typeof(ReportAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "GetFullReportRoot" службы DomainService.
        /// </summary>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<FullReportRoot> GetFullReportRoot(Action<InvokeOperation<FullReportRoot>> callback, object userState)
        {
            this.ValidateMethod("GetFullReportRoot", null);
            return ((InvokeOperation<FullReportRoot>)(this.InvokeOperation("GetFullReportRoot", typeof(FullReportRoot), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "GetFullReportRoot" службы DomainService.
        /// </summary>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<FullReportRoot> GetFullReportRoot()
        {
            this.ValidateMethod("GetFullReportRoot", null);
            return ((InvokeOperation<FullReportRoot>)(this.InvokeOperation("GetFullReportRoot", typeof(FullReportRoot), null, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "GetSutVedReport" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<string> GetSutVedReport(DateTime date, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            this.ValidateMethod("GetSutVedReport", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSutVedReport", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "GetSutVedReport" службы DomainService.
        /// </summary>
        /// <param name="date">Значение параметра "date" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<string> GetSutVedReport(DateTime date)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            this.ValidateMethod("GetSutVedReport", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSutVedReport", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ReportBaseDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "ReportBaseDomainService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IReportBaseDomainServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetFullReport".
            /// </summary>
            /// <param name="selectedData">Значение параметра "selectedData" для данного действия.</param>
            /// <param name="ax1">Значение параметра "ax1" для данного действия.</param>
            /// <param name="ax2">Значение параметра "ax2" для данного действия.</param>
            /// <param name="ax3">Значение параметра "ax3" для данного действия.</param>
            /// <param name="ax4">Значение параметра "ax4" для данного действия.</param>
            /// <param name="ax5">Значение параметра "ax5" для данного действия.</param>
            /// <param name="Title">Значение параметра "Title" для данного действия.</param>
            /// <param name="dateStart">Значение параметра "dateStart" для данного действия.</param>
            /// <param name="dateEnd">Значение параметра "dateEnd" для данного действия.</param>
            /// <param name="ReportType">Значение параметра "ReportType" для данного действия.</param>
            /// <param name="mbType">Значение параметра "mbType" для данного действия.</param>
            /// <param name="isChart">Значение параметра "isChart" для данного действия.</param>
            /// <param name="isTable">Значение параметра "isTable" для данного действия.</param>
            /// <param name="isExcel">Значение параметра "isExcel" для данного действия.</param>
            /// <param name="reportID">Значение параметра "reportID" для данного действия.</param>
            /// <param name="TitleList">Значение параметра "TitleList" для данного действия.</param>
            /// <param name="DateStartList">Значение параметра "DateStartList" для данного действия.</param>
            /// <param name="DateEndList">Значение параметра "DateEndList" для данного действия.</param>
            /// <param name="MBTypeList">Значение параметра "MBTypeList" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportBaseDomainService/GetFullReportDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportBaseDomainService/GetFullReport", ReplyAction="http://tempuri.org/ReportBaseDomainService/GetFullReportResponse")]
            IAsyncResult BeginGetFullReport(
                        IEnumerable<string> selectedData, 
                        IEnumerable<string> ax1, 
                        IEnumerable<string> ax2, 
                        IEnumerable<string> ax3, 
                        IEnumerable<string> ax4, 
                        IEnumerable<string> ax5, 
                        string Title, 
                        DateTime dateStart, 
                        DateTime dateEnd, 
                        ReportTypeEnum ReportType, 
                        FullReportMembersType mbType, 
                        bool isChart, 
                        bool isTable, 
                        bool isExcel, 
                        Guid reportID, 
                        IEnumerable<string> TitleList, 
                        IEnumerable<DateTime> DateStartList, 
                        IEnumerable<DateTime> DateEndList, 
                        IEnumerable<FullReportMembersType> MBTypeList, 
                        AsyncCallback callback, 
                        object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetFullReport".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetFullReport".</param>
            /// <returns>Объект "ReportAnswer", возвращенный из операции "GetFullReport".</returns>
            ReportAnswer EndGetFullReport(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetFullReportRoot".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportBaseDomainService/GetFullReportRootDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportBaseDomainService/GetFullReportRoot", ReplyAction="http://tempuri.org/ReportBaseDomainService/GetFullReportRootResponse")]
            IAsyncResult BeginGetFullReportRoot(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetFullReportRoot".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetFullReportRoot".</param>
            /// <returns>Объект "FullReportRoot", возвращенный из операции "GetFullReportRoot".</returns>
            FullReportRoot EndGetFullReportRoot(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetSutVedReport".
            /// </summary>
            /// <param name="date">Значение параметра "date" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportBaseDomainService/GetSutVedReportDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportBaseDomainService/GetSutVedReport", ReplyAction="http://tempuri.org/ReportBaseDomainService/GetSutVedReportResponse")]
            IAsyncResult BeginGetSutVedReport(DateTime date, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetSutVedReport".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetSutVedReport".</param>
            /// <returns>Объект "String", возвращенный из операции "GetSutVedReport".</returns>
            string EndGetSutVedReport(IAsyncResult result);
        }
        
        internal sealed class ReportBaseDomainContextEntityContainer : EntityContainer
        {
            
            public ReportBaseDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "RUSADomainService" DomainService.
    /// </summary>
    public sealed partial class RUSADomainContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RUSADomainContext"/>.
        /// </summary>
        public RUSADomainContext() : 
                this(new WebDomainClient<IRUSADomainServiceContract>(new Uri("VotGES-Web-Services-RUSADomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="RUSADomainContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы RUSADomainService.</param>
        public RUSADomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IRUSADomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="RUSADomainContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public RUSADomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getChart" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <param name="type">Значение параметра "type" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<ChartAnswer> getChart(RashodHarsData data, RHChartType type, Action<InvokeOperation<ChartAnswer>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            parameters.Add("type", type);
            this.ValidateMethod("getChart", parameters);
            return ((InvokeOperation<ChartAnswer>)(this.InvokeOperation("getChart", typeof(ChartAnswer), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "getChart" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <param name="type">Значение параметра "type" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<ChartAnswer> getChart(RashodHarsData data, RHChartType type)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            parameters.Add("type", type);
            this.ValidateMethod("getChart", parameters);
            return ((InvokeOperation<ChartAnswer>)(this.InvokeOperation("getChart", typeof(ChartAnswer), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "processMaket" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<RashodHarsData> processMaket(RashodHarsData data, Action<InvokeOperation<RashodHarsData>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            this.ValidateMethod("processMaket", parameters);
            return ((InvokeOperation<RashodHarsData>)(this.InvokeOperation("processMaket", typeof(RashodHarsData), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "processMaket" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<RashodHarsData> processMaket(RashodHarsData data)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            this.ValidateMethod("processMaket", parameters);
            return ((InvokeOperation<RashodHarsData>)(this.InvokeOperation("processMaket", typeof(RashodHarsData), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "processRashodHarsData" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <param name="calcRashod">Значение параметра "calcRashod" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<RashodHarsData> processRashodHarsData(RashodHarsData data, bool calcRashod, Action<InvokeOperation<RashodHarsData>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            parameters.Add("calcRashod", calcRashod);
            this.ValidateMethod("processRashodHarsData", parameters);
            return ((InvokeOperation<RashodHarsData>)(this.InvokeOperation("processRashodHarsData", typeof(RashodHarsData), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "processRashodHarsData" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <param name="calcRashod">Значение параметра "calcRashod" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<RashodHarsData> processRashodHarsData(RashodHarsData data, bool calcRashod)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            parameters.Add("calcRashod", calcRashod);
            this.ValidateMethod("processRashodHarsData", parameters);
            return ((InvokeOperation<RashodHarsData>)(this.InvokeOperation("processRashodHarsData", typeof(RashodHarsData), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "processRUSAData" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<RUSAData> processRUSAData(RUSAData data, Action<InvokeOperation<RUSAData>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            this.ValidateMethod("processRUSAData", parameters);
            return ((InvokeOperation<RUSAData>)(this.InvokeOperation("processRUSAData", typeof(RUSAData), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "processRUSAData" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<RUSAData> processRUSAData(RUSAData data)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            this.ValidateMethod("processRUSAData", parameters);
            return ((InvokeOperation<RUSAData>)(this.InvokeOperation("processRUSAData", typeof(RUSAData), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new RUSADomainContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "RUSADomainService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IRUSADomainServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "getChart".
            /// </summary>
            /// <param name="data">Значение параметра "data" для данного действия.</param>
            /// <param name="type">Значение параметра "type" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RUSADomainService/getChartDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RUSADomainService/getChart", ReplyAction="http://tempuri.org/RUSADomainService/getChartResponse")]
            IAsyncResult BegingetChart(RashodHarsData data, RHChartType type, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegingetChart".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegingetChart".</param>
            /// <returns>Объект "ChartAnswer", возвращенный из операции "getChart".</returns>
            ChartAnswer EndgetChart(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "processMaket".
            /// </summary>
            /// <param name="data">Значение параметра "data" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RUSADomainService/processMaketDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RUSADomainService/processMaket", ReplyAction="http://tempuri.org/RUSADomainService/processMaketResponse")]
            IAsyncResult BeginprocessMaket(RashodHarsData data, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginprocessMaket".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginprocessMaket".</param>
            /// <returns>Объект "RashodHarsData", возвращенный из операции "processMaket".</returns>
            RashodHarsData EndprocessMaket(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "processRashodHarsData".
            /// </summary>
            /// <param name="data">Значение параметра "data" для данного действия.</param>
            /// <param name="calcRashod">Значение параметра "calcRashod" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RUSADomainService/processRashodHarsDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RUSADomainService/processRashodHarsData", ReplyAction="http://tempuri.org/RUSADomainService/processRashodHarsDataResponse")]
            IAsyncResult BeginprocessRashodHarsData(RashodHarsData data, bool calcRashod, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginprocessRashodHarsData".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginprocessRashodHarsData".</param>
            /// <returns>Объект "RashodHarsData", возвращенный из операции "processRashodHarsData".</returns>
            RashodHarsData EndprocessRashodHarsData(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "processRUSAData".
            /// </summary>
            /// <param name="data">Значение параметра "data" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RUSADomainService/processRUSADataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RUSADomainService/processRUSAData", ReplyAction="http://tempuri.org/RUSADomainService/processRUSADataResponse")]
            IAsyncResult BeginprocessRUSAData(RUSAData data, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginprocessRUSAData".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginprocessRUSAData".</param>
            /// <returns>Объект "RUSAData", возвращенный из операции "processRUSAData".</returns>
            RUSAData EndprocessRUSAData(IAsyncResult result);
        }
        
        internal sealed class RUSADomainContextEntityContainer : EntityContainer
        {
            
            public RUSADomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// Класс сущности "User".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Web.Services")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="User"/>.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Name".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Roles".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Возвращает значение, указывающее, проверена ли подлинность пользователя.
        /// </summary>
        /// <remarks>
        /// Это значение равно <c>true</c>, если <see cref="Name"/> не является пустым значением и не равно <c>null</c>.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Возвращает значение, указывающее, имеет ли участник данную роль.
        /// </summary>
        /// <remarks>
        /// Возвращает значение, указывающее, содержится ли указанная роль в списке ролей.
        /// Эта функция учитывает регистр символов.
        /// </remarks>
        /// <param name="role">Имя роли, членство в которой проверяется.</param>
        /// <returns>Возвращает значение, указывающее, имеет ли участник данную роль.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
}
